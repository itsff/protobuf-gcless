// Generated by the protocol buffer memless compiler.  DO NOT EDIT!
package protobuf_memless_unittest;

import java.io.IOException;
import com.google.code.proto.memless.ProtobufOutputStream;

public final class UnittestProto {
	private UnittestProto() {
	}

	public enum ForeignEnum {
		FOREIGN_FOO(4), FOREIGN_BAR(5), FOREIGN_BAZ(6), ;
		public static ForeignEnum valueOf(int value) {
			switch (value) {
			case 4:
				return FOREIGN_FOO;
			case 5:
				return FOREIGN_BAR;
			case 6:
				return FOREIGN_BAZ;
			default:
				return null;
			}
		}

		private ForeignEnum(int value) {
			this.value = value;
		}

		private int value;

		public int getValue() {
			return value;
		}
	}

	public enum TestEnumWithDupValue {
		FOO1(1), BAR1(2), BAZ(3), ;
		public static final TestEnumWithDupValue FOO2 = FOO1;
		public static final TestEnumWithDupValue BAR2 = BAR1;

		public static TestEnumWithDupValue valueOf(int value) {
			switch (value) {
			case 3:
				return BAZ;
			default:
				return null;
			}
		}

		private TestEnumWithDupValue(int value) {
			this.value = value;
		}

		private int value;

		public int getValue() {
			return value;
		}
	}

	public enum TestSparseEnum {
		SPARSE_A(123), SPARSE_B(62374), SPARSE_C(12589234), SPARSE_D(-15), SPARSE_E(-53452), SPARSE_F(0), SPARSE_G(2), ;
		public static TestSparseEnum valueOf(int value) {
			switch (value) {
			case 123:
				return SPARSE_A;
			case 62374:
				return SPARSE_B;
			case 12589234:
				return SPARSE_C;
			case -15:
				return SPARSE_D;
			case -53452:
				return SPARSE_E;
			case 0:
				return SPARSE_F;
			case 2:
				return SPARSE_G;
			default:
				return null;
			}
		}

		private TestSparseEnum(int value) {
			this.value = value;
		}

		private int value;

		public int getValue() {
			return value;
		}
	}

	public interface TestAllTypes {
		boolean hasOptional_int32();

		int getOptional_int32();

		void setOptional_int32(int optional_int32);

		boolean hasOptional_int64();

		long getOptional_int64();

		void setOptional_int64(long optional_int64);

		boolean hasOptional_uint32();

		int getOptional_uint32();

		void setOptional_uint32(int optional_uint32);

		boolean hasOptional_uint64();

		long getOptional_uint64();

		void setOptional_uint64(long optional_uint64);

		boolean hasOptional_sint32();

		int getOptional_sint32();

		void setOptional_sint32(int optional_sint32);

		boolean hasOptional_sint64();

		long getOptional_sint64();

		void setOptional_sint64(long optional_sint64);

		boolean hasOptional_fixed32();

		int getOptional_fixed32();

		void setOptional_fixed32(int optional_fixed32);

		boolean hasOptional_fixed64();

		long getOptional_fixed64();

		void setOptional_fixed64(long optional_fixed64);

		boolean hasOptional_sfixed32();

		int getOptional_sfixed32();

		void setOptional_sfixed32(int optional_sfixed32);

		boolean hasOptional_sfixed64();

		long getOptional_sfixed64();

		void setOptional_sfixed64(long optional_sfixed64);

		boolean hasOptional_float();

		float getOptional_float();

		void setOptional_float(float optional_float);

		boolean hasOptional_double();

		double getOptional_double();

		void setOptional_double(double optional_double);

		boolean hasOptional_bool();

		boolean getOptional_bool();

		void setOptional_bool(boolean optional_bool);

		boolean hasOptional_string();

		String getOptional_string();

		void setOptional_string(String optional_string);

		boolean hasOptional_bytes();

		byte[] getOptional_bytes();

		void setOptional_bytes(byte[] optional_bytes);

		boolean hasOptional_nested_message();

		protobuf_memless_unittest.UnittestProto.TestAllTypes.NestedMessage getOptional_nested_message();

		void setOptional_nested_message(protobuf_memless_unittest.UnittestProto.TestAllTypes.NestedMessage optional_nested_message);

		boolean hasOptional_foreign_message();

		protobuf_memless_unittest.UnittestProto.ForeignMessage getOptional_foreign_message();

		void setOptional_foreign_message(protobuf_memless_unittest.UnittestProto.ForeignMessage optional_foreign_message);

		boolean hasOptional_import_message();

		protobuf_memless_import.ImportMessage getOptional_import_message();

		void setOptional_import_message(protobuf_memless_import.ImportMessage optional_import_message);

		boolean hasOptional_nested_enum();

		protobuf_memless_unittest.UnittestProto.TestAllTypes.NestedEnum getOptional_nested_enum();

		void setOptional_nested_enum(protobuf_memless_unittest.UnittestProto.TestAllTypes.NestedEnum optional_nested_enum);

		boolean hasOptional_foreign_enum();

		protobuf_memless_unittest.UnittestProto.ForeignEnum getOptional_foreign_enum();

		void setOptional_foreign_enum(protobuf_memless_unittest.UnittestProto.ForeignEnum optional_foreign_enum);

		boolean hasOptional_import_enum();

		protobuf_memless_import.ImportEnum getOptional_import_enum();

		void setOptional_import_enum(protobuf_memless_import.ImportEnum optional_import_enum);

		boolean hasOptional_string_piece();

		String getOptional_string_piece();

		void setOptional_string_piece(String optional_string_piece);

		boolean hasOptional_cord();

		String getOptional_cord();

		void setOptional_cord(String optional_cord);

		boolean hasRepeated_int32();

		java.util.List<Integer> getRepeated_int32();

		void setRepeated_int32(java.util.List<Integer> repeated_int32);

		boolean hasRepeated_int64();

		java.util.List<Long> getRepeated_int64();

		void setRepeated_int64(java.util.List<Long> repeated_int64);

		boolean hasRepeated_uint32();

		java.util.List<Integer> getRepeated_uint32();

		void setRepeated_uint32(java.util.List<Integer> repeated_uint32);

		boolean hasRepeated_uint64();

		java.util.List<Long> getRepeated_uint64();

		void setRepeated_uint64(java.util.List<Long> repeated_uint64);

		boolean hasRepeated_sint32();

		java.util.List<Integer> getRepeated_sint32();

		void setRepeated_sint32(java.util.List<Integer> repeated_sint32);

		boolean hasRepeated_sint64();

		java.util.List<Long> getRepeated_sint64();

		void setRepeated_sint64(java.util.List<Long> repeated_sint64);

		boolean hasRepeated_fixed32();

		java.util.List<Integer> getRepeated_fixed32();

		void setRepeated_fixed32(java.util.List<Integer> repeated_fixed32);

		boolean hasRepeated_fixed64();

		java.util.List<Long> getRepeated_fixed64();

		void setRepeated_fixed64(java.util.List<Long> repeated_fixed64);

		boolean hasRepeated_sfixed32();

		java.util.List<Integer> getRepeated_sfixed32();

		void setRepeated_sfixed32(java.util.List<Integer> repeated_sfixed32);

		boolean hasRepeated_sfixed64();

		java.util.List<Long> getRepeated_sfixed64();

		void setRepeated_sfixed64(java.util.List<Long> repeated_sfixed64);

		boolean hasRepeated_float();

		java.util.List<Float> getRepeated_float();

		void setRepeated_float(java.util.List<Float> repeated_float);

		boolean hasRepeated_double();

		java.util.List<Double> getRepeated_double();

		void setRepeated_double(java.util.List<Double> repeated_double);

		boolean hasRepeated_bool();

		java.util.List<Boolean> getRepeated_bool();

		void setRepeated_bool(java.util.List<Boolean> repeated_bool);

		boolean hasRepeated_string();

		java.util.List<String> getRepeated_string();

		void setRepeated_string(java.util.List<String> repeated_string);

		boolean hasRepeated_bytes();

		byte[] getRepeated_bytes();

		void setRepeated_bytes(byte[] repeated_bytes);

		boolean hasRepeated_nested_message();

		java.util.List<protobuf_memless_unittest.UnittestProto.TestAllTypes.NestedMessage> getRepeated_nested_message();

		void setRepeated_nested_message(java.util.List<protobuf_memless_unittest.UnittestProto.TestAllTypes.NestedMessage> repeated_nested_message);

		boolean hasRepeated_foreign_message();

		java.util.List<protobuf_memless_unittest.UnittestProto.ForeignMessage> getRepeated_foreign_message();

		void setRepeated_foreign_message(java.util.List<protobuf_memless_unittest.UnittestProto.ForeignMessage> repeated_foreign_message);

		boolean hasRepeated_import_message();

		java.util.List<protobuf_memless_import.ImportMessage> getRepeated_import_message();

		void setRepeated_import_message(java.util.List<protobuf_memless_import.ImportMessage> repeated_import_message);

		boolean hasRepeated_nested_enum();

		java.util.List<protobuf_memless_unittest.UnittestProto.TestAllTypes.NestedEnum> getRepeated_nested_enum();

		void setRepeated_nested_enum(java.util.List<protobuf_memless_unittest.UnittestProto.TestAllTypes.NestedEnum> repeated_nested_enum);

		boolean hasRepeated_foreign_enum();

		java.util.List<protobuf_memless_unittest.UnittestProto.ForeignEnum> getRepeated_foreign_enum();

		void setRepeated_foreign_enum(java.util.List<protobuf_memless_unittest.UnittestProto.ForeignEnum> repeated_foreign_enum);

		boolean hasRepeated_import_enum();

		java.util.List<protobuf_memless_import.ImportEnum> getRepeated_import_enum();

		void setRepeated_import_enum(java.util.List<protobuf_memless_import.ImportEnum> repeated_import_enum);

		boolean hasRepeated_string_piece();

		java.util.List<String> getRepeated_string_piece();

		void setRepeated_string_piece(java.util.List<String> repeated_string_piece);

		boolean hasRepeated_cord();

		java.util.List<String> getRepeated_cord();

		void setRepeated_cord(java.util.List<String> repeated_cord);

		boolean hasDefault_int32();

		int getDefault_int32();

		void setDefault_int32(int default_int32);

		boolean hasDefault_int64();

		long getDefault_int64();

		void setDefault_int64(long default_int64);

		boolean hasDefault_uint32();

		int getDefault_uint32();

		void setDefault_uint32(int default_uint32);

		boolean hasDefault_uint64();

		long getDefault_uint64();

		void setDefault_uint64(long default_uint64);

		boolean hasDefault_sint32();

		int getDefault_sint32();

		void setDefault_sint32(int default_sint32);

		boolean hasDefault_sint64();

		long getDefault_sint64();

		void setDefault_sint64(long default_sint64);

		boolean hasDefault_fixed32();

		int getDefault_fixed32();

		void setDefault_fixed32(int default_fixed32);

		boolean hasDefault_fixed64();

		long getDefault_fixed64();

		void setDefault_fixed64(long default_fixed64);

		boolean hasDefault_sfixed32();

		int getDefault_sfixed32();

		void setDefault_sfixed32(int default_sfixed32);

		boolean hasDefault_sfixed64();

		long getDefault_sfixed64();

		void setDefault_sfixed64(long default_sfixed64);

		boolean hasDefault_float();

		float getDefault_float();

		void setDefault_float(float default_float);

		boolean hasDefault_double();

		double getDefault_double();

		void setDefault_double(double default_double);

		boolean hasDefault_bool();

		boolean getDefault_bool();

		void setDefault_bool(boolean default_bool);

		boolean hasDefault_string();

		String getDefault_string();

		void setDefault_string(String default_string);

		boolean hasDefault_bytes();

		byte[] getDefault_bytes();

		void setDefault_bytes(byte[] default_bytes);

		boolean hasDefault_nested_enum();

		protobuf_memless_unittest.UnittestProto.TestAllTypes.NestedEnum getDefault_nested_enum();

		void setDefault_nested_enum(protobuf_memless_unittest.UnittestProto.TestAllTypes.NestedEnum default_nested_enum);

		boolean hasDefault_foreign_enum();

		protobuf_memless_unittest.UnittestProto.ForeignEnum getDefault_foreign_enum();

		void setDefault_foreign_enum(protobuf_memless_unittest.UnittestProto.ForeignEnum default_foreign_enum);

		boolean hasDefault_import_enum();

		protobuf_memless_import.ImportEnum getDefault_import_enum();

		void setDefault_import_enum(protobuf_memless_import.ImportEnum default_import_enum);

		boolean hasDefault_string_piece();

		String getDefault_string_piece();

		void setDefault_string_piece(String default_string_piece);

		boolean hasDefault_cord();

		String getDefault_cord();

		void setDefault_cord(String default_cord);

		public interface NestedMessage {
			boolean hasBb();

			int getBb();

			void setBb(int bb);
		}

		public static class NestedMessageSerializer {
			public static byte[] serialize(protobuf_memless_unittest.UnittestProto.TestAllTypes.NestedMessage message) {
				try {
					assertInitialized(message);
					int totalSize = 0;
					if (message.hasBb()) {
						totalSize += ProtobufOutputStream.computeInt32Size(1, message.getBb());
						System.out.println(totalSize);
					}
					final byte[] result = new byte[totalSize];
					int position = 0;
					if (message.hasBb()) {
						position = ProtobufOutputStream.writeInt32(1, message.getBb(), result, position);
					}
					System.out.println(position);
					ProtobufOutputStream.checkNoSpaceLeft(result, position);
					return result;
				} catch (IOException e) {
					throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
				}
			}

			private static void assertInitialized(protobuf_memless_unittest.UnittestProto.TestAllTypes.NestedMessage message) {
			}
		}

		public enum NestedEnum {
			FOO(1), BAR(2), BAZ(3), ;
			public static NestedEnum valueOf(int value) {
				switch (value) {
				case 1:
					return FOO;
				case 2:
					return BAR;
				case 3:
					return BAZ;
				default:
					return null;
				}
			}

			private NestedEnum(int value) {
				this.value = value;
			}

			private int value;

			public int getValue() {
				return value;
			}
		}

	}

	public static class TestAllTypesSerializer {
		public static byte[] serialize(protobuf_memless_unittest.UnittestProto.TestAllTypes message) {
			try {
				assertInitialized(message);
				int totalSize = 0;
				if (message.hasOptional_int32()) {
					totalSize += ProtobufOutputStream.computeInt32Size(1, message.getOptional_int32());
					System.out.println(totalSize);
				}
				if (message.hasOptional_int64()) {
					totalSize += ProtobufOutputStream.computeInt64Size(2, message.getOptional_int64());
					System.out.println(totalSize);
				}
				if (message.hasOptional_uint32()) {
					totalSize += ProtobufOutputStream.computeUint32Size(3, message.getOptional_uint32());
					System.out.println(totalSize);
				}
				if (message.hasOptional_uint64()) {
					totalSize += ProtobufOutputStream.computeUint64Size(4, message.getOptional_uint64());
					System.out.println(totalSize);
				}
				if (message.hasOptional_sint32()) {
					totalSize += ProtobufOutputStream.computeSint32Size(5, message.getOptional_sint32());
					System.out.println(totalSize);
				}
				if (message.hasOptional_sint64()) {
					totalSize += ProtobufOutputStream.computeSint64Size(6, message.getOptional_sint64());
					System.out.println(totalSize);
				}
				if (message.hasOptional_fixed32()) {
					totalSize += ProtobufOutputStream.computeFixed32Size(7, message.getOptional_fixed32());
					System.out.println(totalSize);
				}
				if (message.hasOptional_fixed64()) {
					totalSize += ProtobufOutputStream.computeFixed64Size(8, message.getOptional_fixed64());
					System.out.println(totalSize);
				}
				if (message.hasOptional_sfixed32()) {
					totalSize += ProtobufOutputStream.computeSfixed32Size(9, message.getOptional_sfixed32());
					System.out.println(totalSize);
				}
				if (message.hasOptional_sfixed64()) {
					totalSize += ProtobufOutputStream.computeSfixed64Size(10, message.getOptional_sfixed64());
					System.out.println(totalSize);
				}
				if (message.hasOptional_float()) {
					totalSize += ProtobufOutputStream.computeFloatSize(11, message.getOptional_float());
					System.out.println(totalSize);
				}
				if (message.hasOptional_double()) {
					totalSize += ProtobufOutputStream.computeDoubleSize(12, message.getOptional_double());
					System.out.println(totalSize);
				}
				if (message.hasOptional_bool()) {
					totalSize += ProtobufOutputStream.computeBoolSize(13, message.getOptional_bool());
					System.out.println(totalSize);
				}
				byte[] optional_stringBuffer = null;
				if (message.hasOptional_string()) {
					optional_stringBuffer = message.getOptional_string().getBytes("UTF-8");
					totalSize += optional_stringBuffer.length;
					totalSize += ProtobufOutputStream.computeRawVarint32Size(14);
					totalSize += ProtobufOutputStream.computeRawVarint32Size(optional_stringBuffer.length);
					System.out.println(totalSize);
				}
				if (message.hasOptional_bytes()) {
					totalSize += message.getOptional_bytes().length;
					totalSize += ProtobufOutputStream.computeRawVarint32Size(15);
					totalSize += ProtobufOutputStream.computeRawVarint32Size(message.getOptional_bytes().length);
					System.out.println(totalSize);
				}
				byte[] optional_nested_messageBuffer = null;
				if (message.hasOptional_nested_message()) {
					optional_nested_messageBuffer = protobuf_memless_unittest.UnittestProto.TestAllTypes.NestedMessageSerializer.serialize(message.getOptional_nested_message());
					totalSize += optional_nested_messageBuffer.length;
					System.out.println(totalSize);
				}
				byte[] optional_foreign_messageBuffer = null;
				if (message.hasOptional_foreign_message()) {
					optional_foreign_messageBuffer = protobuf_memless_unittest.UnittestProto.ForeignMessageSerializer.serialize(message.getOptional_foreign_message());
					totalSize += optional_foreign_messageBuffer.length;
					System.out.println(totalSize);
				}
				byte[] optional_import_messageBuffer = null;
				if (message.hasOptional_import_message()) {
					optional_import_messageBuffer = protobuf_memless_import.ImportMessageSerializer.serialize(message.getOptional_import_message());
					totalSize += optional_import_messageBuffer.length;
					System.out.println(totalSize);
				}
				if (message.hasOptional_nested_enum()) {
					totalSize += ProtobufOutputStream.computeEnumSize(21, message.getOptional_nested_enum().getValue());
					System.out.println(totalSize);
				}
				if (message.hasOptional_foreign_enum()) {
					totalSize += ProtobufOutputStream.computeEnumSize(22, message.getOptional_foreign_enum().getValue());
					System.out.println(totalSize);
				}
				if (message.hasOptional_import_enum()) {
					totalSize += ProtobufOutputStream.computeEnumSize(23, message.getOptional_import_enum().getValue());
					System.out.println(totalSize);
				}
				byte[] optional_string_pieceBuffer = null;
				if (message.hasOptional_string_piece()) {
					optional_string_pieceBuffer = message.getOptional_string_piece().getBytes("UTF-8");
					totalSize += optional_string_pieceBuffer.length;
					totalSize += ProtobufOutputStream.computeRawVarint32Size(24);
					totalSize += ProtobufOutputStream.computeRawVarint32Size(optional_string_pieceBuffer.length);
					System.out.println(totalSize);
				}
				byte[] optional_cordBuffer = null;
				if (message.hasOptional_cord()) {
					optional_cordBuffer = message.getOptional_cord().getBytes("UTF-8");
					totalSize += optional_cordBuffer.length;
					totalSize += ProtobufOutputStream.computeRawVarint32Size(25);
					totalSize += ProtobufOutputStream.computeRawVarint32Size(optional_cordBuffer.length);
					System.out.println(totalSize);
				}
				int repeated_int32Size = 0;
				if (message.hasRepeated_int32()) {
					for (int i = 0; i < message.getRepeated_int32().size(); i++) {
						repeated_int32Size += ProtobufOutputStream.computeInt32Size(31, message.getRepeated_int32().get(i));
					}
					totalSize += repeated_int32Size;
				}
				System.out.println(totalSize);
				int repeated_int64Size = 0;
				if (message.hasRepeated_int64()) {
					for (int i = 0; i < message.getRepeated_int64().size(); i++) {
						repeated_int64Size += ProtobufOutputStream.computeInt64Size(32, message.getRepeated_int64().get(i));
					}
					totalSize += repeated_int64Size;
				}
				System.out.println(totalSize);
				int repeated_uint32Size = 0;
				if (message.hasRepeated_uint32()) {
					for (int i = 0; i < message.getRepeated_uint32().size(); i++) {
						repeated_uint32Size += ProtobufOutputStream.computeUint32Size(33, message.getRepeated_uint32().get(i));
					}
					totalSize += repeated_uint32Size;
				}
				System.out.println(totalSize);
				int repeated_uint64Size = 0;
				if (message.hasRepeated_uint64()) {
					for (int i = 0; i < message.getRepeated_uint64().size(); i++) {
						repeated_uint64Size += ProtobufOutputStream.computeUint64Size(34, message.getRepeated_uint64().get(i));
					}
					totalSize += repeated_uint64Size;
				}
				System.out.println(totalSize);
				int repeated_sint32Size = 0;
				if (message.hasRepeated_sint32()) {
					for (int i = 0; i < message.getRepeated_sint32().size(); i++) {
						repeated_sint32Size += ProtobufOutputStream.computeSint32Size(35, message.getRepeated_sint32().get(i));
					}
					totalSize += repeated_sint32Size;
				}
				System.out.println(totalSize);
				int repeated_sint64Size = 0;
				if (message.hasRepeated_sint64()) {
					for (int i = 0; i < message.getRepeated_sint64().size(); i++) {
						repeated_sint64Size += ProtobufOutputStream.computeSint64Size(36, message.getRepeated_sint64().get(i));
					}
					totalSize += repeated_sint64Size;
				}
				System.out.println(totalSize);
				int repeated_fixed32Size = 0;
				if (message.hasRepeated_fixed32()) {
					for (int i = 0; i < message.getRepeated_fixed32().size(); i++) {
						repeated_fixed32Size += ProtobufOutputStream.computeFixed32Size(37, message.getRepeated_fixed32().get(i));
					}
					totalSize += repeated_fixed32Size;
				}
				System.out.println(totalSize);
				int repeated_fixed64Size = 0;
				if (message.hasRepeated_fixed64()) {
					for (int i = 0; i < message.getRepeated_fixed64().size(); i++) {
						repeated_fixed64Size += ProtobufOutputStream.computeFixed64Size(38, message.getRepeated_fixed64().get(i));
					}
					totalSize += repeated_fixed64Size;
				}
				System.out.println(totalSize);
				int repeated_sfixed32Size = 0;
				if (message.hasRepeated_sfixed32()) {
					for (int i = 0; i < message.getRepeated_sfixed32().size(); i++) {
						repeated_sfixed32Size += ProtobufOutputStream.computeSfixed32Size(39, message.getRepeated_sfixed32().get(i));
					}
					totalSize += repeated_sfixed32Size;
				}
				System.out.println(totalSize);
				int repeated_sfixed64Size = 0;
				if (message.hasRepeated_sfixed64()) {
					for (int i = 0; i < message.getRepeated_sfixed64().size(); i++) {
						repeated_sfixed64Size += ProtobufOutputStream.computeSfixed64Size(40, message.getRepeated_sfixed64().get(i));
					}
					totalSize += repeated_sfixed64Size;
				}
				System.out.println(totalSize);
				int repeated_floatSize = 0;
				if (message.hasRepeated_float()) {
					for (int i = 0; i < message.getRepeated_float().size(); i++) {
						repeated_floatSize += ProtobufOutputStream.computeFloatSize(41, message.getRepeated_float().get(i));
					}
					totalSize += repeated_floatSize;
				}
				System.out.println(totalSize);
				int repeated_doubleSize = 0;
				if (message.hasRepeated_double()) {
					for (int i = 0; i < message.getRepeated_double().size(); i++) {
						repeated_doubleSize += ProtobufOutputStream.computeDoubleSize(42, message.getRepeated_double().get(i));
					}
					totalSize += repeated_doubleSize;
				}
				System.out.println(totalSize);
				int repeated_boolSize = 0;
				if (message.hasRepeated_bool()) {
					for (int i = 0; i < message.getRepeated_bool().size(); i++) {
						repeated_boolSize += ProtobufOutputStream.computeBoolSize(43, message.getRepeated_bool().get(i));
					}
					totalSize += repeated_boolSize;
				}
				System.out.println(totalSize);
				byte[] repeated_stringBuffer = null;
				if (message.hasRepeated_string()) {
					java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
					for (int i = 0; i < message.getRepeated_string().size(); i++) {
						ProtobufOutputStream.writeString(44, message.getRepeated_string().get(i), baos);
					}
					repeated_stringBuffer = baos.toByteArray();
					totalSize += ProtobufOutputStream.computeRawVarint32Size(44);
					totalSize += ProtobufOutputStream.computeRawVarint32Size(repeated_stringBuffer.length);
					totalSize += repeated_stringBuffer.length;
					System.out.println(totalSize);
				}
				int repeated_bytesSize = 0;
				if (message.hasRepeated_bytes()) {
					repeated_bytesSize = message.getRepeated_bytes().length;
					totalSize += repeated_bytesSize;
				}
				System.out.println(totalSize);
				byte[] repeated_nested_messageBuffer = null;
				if (message.hasRepeated_nested_message()) {
					java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
					totalSize += ProtobufOutputStream.computeRawVarint32Size(48);
					totalSize += ProtobufOutputStream.computeRawVarint32Size(message.getRepeated_nested_message().size());
					for (int i = 0; i < message.getRepeated_nested_message().size(); i++) {
						baos.write(protobuf_memless_unittest.UnittestProto.TestAllTypes.NestedMessageSerializer.serialize(message.getRepeated_nested_message().get(i)));
					}
					repeated_nested_messageBuffer = baos.toByteArray();
					totalSize += repeated_nested_messageBuffer.length;
					System.out.println(totalSize);
				}
				byte[] repeated_foreign_messageBuffer = null;
				if (message.hasRepeated_foreign_message()) {
					java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
					totalSize += ProtobufOutputStream.computeRawVarint32Size(49);
					totalSize += ProtobufOutputStream.computeRawVarint32Size(message.getRepeated_foreign_message().size());
					for (int i = 0; i < message.getRepeated_foreign_message().size(); i++) {
						baos.write(protobuf_memless_unittest.UnittestProto.ForeignMessageSerializer.serialize(message.getRepeated_foreign_message().get(i)));
					}
					repeated_foreign_messageBuffer = baos.toByteArray();
					totalSize += repeated_foreign_messageBuffer.length;
					System.out.println(totalSize);
				}
				byte[] repeated_import_messageBuffer = null;
				if (message.hasRepeated_import_message()) {
					java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
					totalSize += ProtobufOutputStream.computeRawVarint32Size(50);
					totalSize += ProtobufOutputStream.computeRawVarint32Size(message.getRepeated_import_message().size());
					for (int i = 0; i < message.getRepeated_import_message().size(); i++) {
						baos.write(protobuf_memless_import.ImportMessageSerializer.serialize(message.getRepeated_import_message().get(i)));
					}
					repeated_import_messageBuffer = baos.toByteArray();
					totalSize += repeated_import_messageBuffer.length;
					System.out.println(totalSize);
				}
				int repeated_nested_enumSize = 0;
				if (message.hasRepeated_nested_enum()) {
					for (int i = 0; i < message.getRepeated_nested_enum().size(); i++) {
						repeated_nested_enumSize += ProtobufOutputStream.computeEnumSize(51, message.getRepeated_nested_enum().get(i).getValue());
					}
					totalSize += repeated_nested_enumSize;
				}
				System.out.println(totalSize);
				int repeated_foreign_enumSize = 0;
				if (message.hasRepeated_foreign_enum()) {
					for (int i = 0; i < message.getRepeated_foreign_enum().size(); i++) {
						repeated_foreign_enumSize += ProtobufOutputStream.computeEnumSize(52, message.getRepeated_foreign_enum().get(i).getValue());
					}
					totalSize += repeated_foreign_enumSize;
				}
				System.out.println(totalSize);
				int repeated_import_enumSize = 0;
				if (message.hasRepeated_import_enum()) {
					for (int i = 0; i < message.getRepeated_import_enum().size(); i++) {
						repeated_import_enumSize += ProtobufOutputStream.computeEnumSize(53, message.getRepeated_import_enum().get(i).getValue());
					}
					totalSize += repeated_import_enumSize;
				}
				System.out.println(totalSize);
				byte[] repeated_string_pieceBuffer = null;
				if (message.hasRepeated_string_piece()) {
					java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
					for (int i = 0; i < message.getRepeated_string_piece().size(); i++) {
						ProtobufOutputStream.writeString(54, message.getRepeated_string_piece().get(i), baos);
					}
					repeated_string_pieceBuffer = baos.toByteArray();
					totalSize += ProtobufOutputStream.computeRawVarint32Size(54);
					totalSize += ProtobufOutputStream.computeRawVarint32Size(repeated_string_pieceBuffer.length);
					totalSize += repeated_string_pieceBuffer.length;
					System.out.println(totalSize);
				}
				byte[] repeated_cordBuffer = null;
				if (message.hasRepeated_cord()) {
					java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
					for (int i = 0; i < message.getRepeated_cord().size(); i++) {
						ProtobufOutputStream.writeString(55, message.getRepeated_cord().get(i), baos);
					}
					repeated_cordBuffer = baos.toByteArray();
					totalSize += ProtobufOutputStream.computeRawVarint32Size(55);
					totalSize += ProtobufOutputStream.computeRawVarint32Size(repeated_cordBuffer.length);
					totalSize += repeated_cordBuffer.length;
					System.out.println(totalSize);
				}
				if (message.hasDefault_int32()) {
					totalSize += ProtobufOutputStream.computeInt32Size(61, message.getDefault_int32());
					System.out.println(totalSize);
				}
				if (message.hasDefault_int64()) {
					totalSize += ProtobufOutputStream.computeInt64Size(62, message.getDefault_int64());
					System.out.println(totalSize);
				}
				if (message.hasDefault_uint32()) {
					totalSize += ProtobufOutputStream.computeUint32Size(63, message.getDefault_uint32());
					System.out.println(totalSize);
				}
				if (message.hasDefault_uint64()) {
					totalSize += ProtobufOutputStream.computeUint64Size(64, message.getDefault_uint64());
					System.out.println(totalSize);
				}
				if (message.hasDefault_sint32()) {
					totalSize += ProtobufOutputStream.computeSint32Size(65, message.getDefault_sint32());
					System.out.println(totalSize);
				}
				if (message.hasDefault_sint64()) {
					totalSize += ProtobufOutputStream.computeSint64Size(66, message.getDefault_sint64());
					System.out.println(totalSize);
				}
				if (message.hasDefault_fixed32()) {
					totalSize += ProtobufOutputStream.computeFixed32Size(67, message.getDefault_fixed32());
					System.out.println(totalSize);
				}
				if (message.hasDefault_fixed64()) {
					totalSize += ProtobufOutputStream.computeFixed64Size(68, message.getDefault_fixed64());
					System.out.println(totalSize);
				}
				if (message.hasDefault_sfixed32()) {
					totalSize += ProtobufOutputStream.computeSfixed32Size(69, message.getDefault_sfixed32());
					System.out.println(totalSize);
				}
				if (message.hasDefault_sfixed64()) {
					totalSize += ProtobufOutputStream.computeSfixed64Size(70, message.getDefault_sfixed64());
					System.out.println(totalSize);
				}
				if (message.hasDefault_float()) {
					totalSize += ProtobufOutputStream.computeFloatSize(71, message.getDefault_float());
					System.out.println(totalSize);
				}
				if (message.hasDefault_double()) {
					totalSize += ProtobufOutputStream.computeDoubleSize(72, message.getDefault_double());
					System.out.println(totalSize);
				}
				if (message.hasDefault_bool()) {
					totalSize += ProtobufOutputStream.computeBoolSize(73, message.getDefault_bool());
					System.out.println(totalSize);
				}
				byte[] default_stringBuffer = null;
				if (message.hasDefault_string()) {
					default_stringBuffer = message.getDefault_string().getBytes("UTF-8");
					totalSize += default_stringBuffer.length;
					totalSize += ProtobufOutputStream.computeRawVarint32Size(74);
					totalSize += ProtobufOutputStream.computeRawVarint32Size(default_stringBuffer.length);
					System.out.println(totalSize);
				}
				if (message.hasDefault_bytes()) {
					totalSize += message.getDefault_bytes().length;
					totalSize += ProtobufOutputStream.computeRawVarint32Size(75);
					totalSize += ProtobufOutputStream.computeRawVarint32Size(message.getDefault_bytes().length);
					System.out.println(totalSize);
				}
				if (message.hasDefault_nested_enum()) {
					totalSize += ProtobufOutputStream.computeEnumSize(81, message.getDefault_nested_enum().getValue());
					System.out.println(totalSize);
				}
				if (message.hasDefault_foreign_enum()) {
					totalSize += ProtobufOutputStream.computeEnumSize(82, message.getDefault_foreign_enum().getValue());
					System.out.println(totalSize);
				}
				if (message.hasDefault_import_enum()) {
					totalSize += ProtobufOutputStream.computeEnumSize(83, message.getDefault_import_enum().getValue());
					System.out.println(totalSize);
				}
				byte[] default_string_pieceBuffer = null;
				if (message.hasDefault_string_piece()) {
					default_string_pieceBuffer = message.getDefault_string_piece().getBytes("UTF-8");
					totalSize += default_string_pieceBuffer.length;
					totalSize += ProtobufOutputStream.computeRawVarint32Size(84);
					totalSize += ProtobufOutputStream.computeRawVarint32Size(default_string_pieceBuffer.length);
					System.out.println(totalSize);
				}
				byte[] default_cordBuffer = null;
				if (message.hasDefault_cord()) {
					default_cordBuffer = message.getDefault_cord().getBytes("UTF-8");
					totalSize += default_cordBuffer.length;
					totalSize += ProtobufOutputStream.computeRawVarint32Size(85);
					totalSize += ProtobufOutputStream.computeRawVarint32Size(default_cordBuffer.length);
					System.out.println(totalSize);
				}
				final byte[] result = new byte[totalSize];
				int position = 0;
				if (message.hasOptional_int32()) {
					position = ProtobufOutputStream.writeInt32(1, message.getOptional_int32(), result, position);
				}
				System.out.println(position);
				if (message.hasOptional_int64()) {
					position = ProtobufOutputStream.writeInt64(2, message.getOptional_int64(), result, position);
				}
				System.out.println(position);
				if (message.hasOptional_uint32()) {
					position = ProtobufOutputStream.writeUint32(3, message.getOptional_uint32(), result, position);
				}
				System.out.println(position);
				if (message.hasOptional_uint64()) {
					position = ProtobufOutputStream.writeUint64(4, message.getOptional_uint64(), result, position);
				}
				System.out.println(position);
				if (message.hasOptional_sint32()) {
					position = ProtobufOutputStream.writeSint32(5, message.getOptional_sint32(), result, position);
				}
				System.out.println(position);
				if (message.hasOptional_sint64()) {
					position = ProtobufOutputStream.writeSint64(6, message.getOptional_sint64(), result, position);
				}
				System.out.println(position);
				if (message.hasOptional_fixed32()) {
					position = ProtobufOutputStream.writeFixed32(7, message.getOptional_fixed32(), result, position);
				}
				System.out.println(position);
				if (message.hasOptional_fixed64()) {
					position = ProtobufOutputStream.writeFixed64(8, message.getOptional_fixed64(), result, position);
				}
				System.out.println(position);
				if (message.hasOptional_sfixed32()) {
					position = ProtobufOutputStream.writeSfixed32(9, message.getOptional_sfixed32(), result, position);
				}
				System.out.println(position);
				if (message.hasOptional_sfixed64()) {
					position = ProtobufOutputStream.writeSfixed64(10, message.getOptional_sfixed64(), result, position);
				}
				System.out.println(position);
				if (message.hasOptional_float()) {
					position = ProtobufOutputStream.writeFloat(11, message.getOptional_float(), result, position);
				}
				System.out.println(position);
				if (message.hasOptional_double()) {
					position = ProtobufOutputStream.writeDouble(12, message.getOptional_double(), result, position);
				}
				System.out.println(position);
				if (message.hasOptional_bool()) {
					position = ProtobufOutputStream.writeBool(13, message.getOptional_bool(), result, position);
				}
				System.out.println(position);
				if (message.hasOptional_string()) {
					position = ProtobufOutputStream.writeString(14, optional_stringBuffer, result, position);
					System.out.println(position);
				}
				if (message.hasOptional_bytes()) {
					position = ProtobufOutputStream.writeBytes(15, message.getOptional_bytes(), result, position);
				}
				System.out.println(position);
				if (message.hasOptional_nested_message()) {
					position = ProtobufOutputStream.writeBytes(18, optional_nested_messageBuffer, result, position);
				}
				System.out.println(position);
				if (message.hasOptional_foreign_message()) {
					position = ProtobufOutputStream.writeBytes(19, optional_foreign_messageBuffer, result, position);
				}
				System.out.println(position);
				if (message.hasOptional_import_message()) {
					position = ProtobufOutputStream.writeBytes(20, optional_import_messageBuffer, result, position);
				}
				System.out.println(position);
				if (message.hasOptional_nested_enum()) {
					position = ProtobufOutputStream.writeEnum(21, message.getOptional_nested_enum().getValue(), result, position);
				}
				System.out.println(position);
				if (message.hasOptional_foreign_enum()) {
					position = ProtobufOutputStream.writeEnum(22, message.getOptional_foreign_enum().getValue(), result, position);
				}
				System.out.println(position);
				if (message.hasOptional_import_enum()) {
					position = ProtobufOutputStream.writeEnum(23, message.getOptional_import_enum().getValue(), result, position);
				}
				System.out.println(position);
				if (message.hasOptional_string_piece()) {
					position = ProtobufOutputStream.writeString(24, optional_string_pieceBuffer, result, position);
					System.out.println(position);
				}
				if (message.hasOptional_cord()) {
					position = ProtobufOutputStream.writeString(25, optional_cordBuffer, result, position);
					System.out.println(position);
				}
				if (message.hasRepeated_int32()) {
					if (message.getRepeated_int32().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(31, result, position);
						position = ProtobufOutputStream.writeRawVarint32(repeated_int32Size, result, position);
						for (int i = 0; i < message.getRepeated_int32().size(); i++) {
							position = ProtobufOutputStream.writeInt32NoTag(message.getRepeated_int32().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasRepeated_int64()) {
					if (message.getRepeated_int64().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(32, result, position);
						position = ProtobufOutputStream.writeRawVarint32(repeated_int64Size, result, position);
						for (int i = 0; i < message.getRepeated_int64().size(); i++) {
							position = ProtobufOutputStream.writeInt64NoTag(message.getRepeated_int64().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasRepeated_uint32()) {
					if (message.getRepeated_uint32().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(33, result, position);
						position = ProtobufOutputStream.writeRawVarint32(repeated_uint32Size, result, position);
						for (int i = 0; i < message.getRepeated_uint32().size(); i++) {
							position = ProtobufOutputStream.writeUint32NoTag(message.getRepeated_uint32().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasRepeated_uint64()) {
					if (message.getRepeated_uint64().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(34, result, position);
						position = ProtobufOutputStream.writeRawVarint32(repeated_uint64Size, result, position);
						for (int i = 0; i < message.getRepeated_uint64().size(); i++) {
							position = ProtobufOutputStream.writeUint64NoTag(message.getRepeated_uint64().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasRepeated_sint32()) {
					if (message.getRepeated_sint32().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(35, result, position);
						position = ProtobufOutputStream.writeRawVarint32(repeated_sint32Size, result, position);
						for (int i = 0; i < message.getRepeated_sint32().size(); i++) {
							position = ProtobufOutputStream.writeSint32NoTag(message.getRepeated_sint32().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasRepeated_sint64()) {
					if (message.getRepeated_sint64().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(36, result, position);
						position = ProtobufOutputStream.writeRawVarint32(repeated_sint64Size, result, position);
						for (int i = 0; i < message.getRepeated_sint64().size(); i++) {
							position = ProtobufOutputStream.writeSint64NoTag(message.getRepeated_sint64().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasRepeated_fixed32()) {
					if (message.getRepeated_fixed32().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(37, result, position);
						position = ProtobufOutputStream.writeRawVarint32(repeated_fixed32Size, result, position);
						for (int i = 0; i < message.getRepeated_fixed32().size(); i++) {
							position = ProtobufOutputStream.writeFixed32NoTag(message.getRepeated_fixed32().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasRepeated_fixed64()) {
					if (message.getRepeated_fixed64().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(38, result, position);
						position = ProtobufOutputStream.writeRawVarint32(repeated_fixed64Size, result, position);
						for (int i = 0; i < message.getRepeated_fixed64().size(); i++) {
							position = ProtobufOutputStream.writeFixed64NoTag(message.getRepeated_fixed64().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasRepeated_sfixed32()) {
					if (message.getRepeated_sfixed32().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(39, result, position);
						position = ProtobufOutputStream.writeRawVarint32(repeated_sfixed32Size, result, position);
						for (int i = 0; i < message.getRepeated_sfixed32().size(); i++) {
							position = ProtobufOutputStream.writeSfixed32NoTag(message.getRepeated_sfixed32().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasRepeated_sfixed64()) {
					if (message.getRepeated_sfixed64().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(40, result, position);
						position = ProtobufOutputStream.writeRawVarint32(repeated_sfixed64Size, result, position);
						for (int i = 0; i < message.getRepeated_sfixed64().size(); i++) {
							position = ProtobufOutputStream.writeSfixed64NoTag(message.getRepeated_sfixed64().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasRepeated_float()) {
					if (message.getRepeated_float().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(41, result, position);
						position = ProtobufOutputStream.writeRawVarint32(repeated_floatSize, result, position);
						for (int i = 0; i < message.getRepeated_float().size(); i++) {
							position = ProtobufOutputStream.writeFloatNoTag(message.getRepeated_float().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasRepeated_double()) {
					if (message.getRepeated_double().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(42, result, position);
						position = ProtobufOutputStream.writeRawVarint32(repeated_doubleSize, result, position);
						for (int i = 0; i < message.getRepeated_double().size(); i++) {
							position = ProtobufOutputStream.writeDoubleNoTag(message.getRepeated_double().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasRepeated_bool()) {
					if (message.getRepeated_bool().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(43, result, position);
						position = ProtobufOutputStream.writeRawVarint32(repeated_boolSize, result, position);
						for (int i = 0; i < message.getRepeated_bool().size(); i++) {
							position = ProtobufOutputStream.writeBoolNoTag(message.getRepeated_bool().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasRepeated_string()) {
					position = ProtobufOutputStream.writeString(44, repeated_stringBuffer, result, position);
					System.out.println(position);
				}
				if (message.hasRepeated_bytes()) {
					if (message.getRepeated_bytes().length != 0) {
						position = ProtobufOutputStream.writeRawVarint32(45, result, position);
						position = ProtobufOutputStream.writeRawVarint32(repeated_bytesSize, result, position);
						position = ProtobufOutputStream.writeRawBytes(message.getRepeated_bytes(), result, position);
						System.out.println(position);
					}
				}
				if (message.hasRepeated_nested_message()) {
					if (message.getRepeated_nested_message().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(48, result, position);
						position = ProtobufOutputStream.writeRawVarint32(repeated_nested_messageBuffer.length, result, position);
						position = ProtobufOutputStream.writeRawBytes(repeated_nested_messageBuffer, result, position);
						System.out.println(position);
					}
				}
				if (message.hasRepeated_foreign_message()) {
					if (message.getRepeated_foreign_message().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(49, result, position);
						position = ProtobufOutputStream.writeRawVarint32(repeated_foreign_messageBuffer.length, result, position);
						position = ProtobufOutputStream.writeRawBytes(repeated_foreign_messageBuffer, result, position);
						System.out.println(position);
					}
				}
				if (message.hasRepeated_import_message()) {
					if (message.getRepeated_import_message().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(50, result, position);
						position = ProtobufOutputStream.writeRawVarint32(repeated_import_messageBuffer.length, result, position);
						position = ProtobufOutputStream.writeRawBytes(repeated_import_messageBuffer, result, position);
						System.out.println(position);
					}
				}
				if (message.hasRepeated_nested_enum()) {
					if (message.getRepeated_nested_enum().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(51, result, position);
						position = ProtobufOutputStream.writeRawVarint32(repeated_nested_enumSize, result, position);
						for (int i = 0; i < message.getRepeated_nested_enum().size(); i++) {
							position = ProtobufOutputStream.writeEnumNoTag(message.getRepeated_nested_enum().get(i).getValue(), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasRepeated_foreign_enum()) {
					if (message.getRepeated_foreign_enum().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(52, result, position);
						position = ProtobufOutputStream.writeRawVarint32(repeated_foreign_enumSize, result, position);
						for (int i = 0; i < message.getRepeated_foreign_enum().size(); i++) {
							position = ProtobufOutputStream.writeEnumNoTag(message.getRepeated_foreign_enum().get(i).getValue(), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasRepeated_import_enum()) {
					if (message.getRepeated_import_enum().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(53, result, position);
						position = ProtobufOutputStream.writeRawVarint32(repeated_import_enumSize, result, position);
						for (int i = 0; i < message.getRepeated_import_enum().size(); i++) {
							position = ProtobufOutputStream.writeEnumNoTag(message.getRepeated_import_enum().get(i).getValue(), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasRepeated_string_piece()) {
					position = ProtobufOutputStream.writeString(54, repeated_string_pieceBuffer, result, position);
					System.out.println(position);
				}
				if (message.hasRepeated_cord()) {
					position = ProtobufOutputStream.writeString(55, repeated_cordBuffer, result, position);
					System.out.println(position);
				}
				if (message.hasDefault_int32()) {
					position = ProtobufOutputStream.writeInt32(61, message.getDefault_int32(), result, position);
				}
				System.out.println(position);
				if (message.hasDefault_int64()) {
					position = ProtobufOutputStream.writeInt64(62, message.getDefault_int64(), result, position);
				}
				System.out.println(position);
				if (message.hasDefault_uint32()) {
					position = ProtobufOutputStream.writeUint32(63, message.getDefault_uint32(), result, position);
				}
				System.out.println(position);
				if (message.hasDefault_uint64()) {
					position = ProtobufOutputStream.writeUint64(64, message.getDefault_uint64(), result, position);
				}
				System.out.println(position);
				if (message.hasDefault_sint32()) {
					position = ProtobufOutputStream.writeSint32(65, message.getDefault_sint32(), result, position);
				}
				System.out.println(position);
				if (message.hasDefault_sint64()) {
					position = ProtobufOutputStream.writeSint64(66, message.getDefault_sint64(), result, position);
				}
				System.out.println(position);
				if (message.hasDefault_fixed32()) {
					position = ProtobufOutputStream.writeFixed32(67, message.getDefault_fixed32(), result, position);
				}
				System.out.println(position);
				if (message.hasDefault_fixed64()) {
					position = ProtobufOutputStream.writeFixed64(68, message.getDefault_fixed64(), result, position);
				}
				System.out.println(position);
				if (message.hasDefault_sfixed32()) {
					position = ProtobufOutputStream.writeSfixed32(69, message.getDefault_sfixed32(), result, position);
				}
				System.out.println(position);
				if (message.hasDefault_sfixed64()) {
					position = ProtobufOutputStream.writeSfixed64(70, message.getDefault_sfixed64(), result, position);
				}
				System.out.println(position);
				if (message.hasDefault_float()) {
					position = ProtobufOutputStream.writeFloat(71, message.getDefault_float(), result, position);
				}
				System.out.println(position);
				if (message.hasDefault_double()) {
					position = ProtobufOutputStream.writeDouble(72, message.getDefault_double(), result, position);
				}
				System.out.println(position);
				if (message.hasDefault_bool()) {
					position = ProtobufOutputStream.writeBool(73, message.getDefault_bool(), result, position);
				}
				System.out.println(position);
				if (message.hasDefault_string()) {
					position = ProtobufOutputStream.writeString(74, default_stringBuffer, result, position);
					System.out.println(position);
				}
				if (message.hasDefault_bytes()) {
					position = ProtobufOutputStream.writeBytes(75, message.getDefault_bytes(), result, position);
				}
				System.out.println(position);
				if (message.hasDefault_nested_enum()) {
					position = ProtobufOutputStream.writeEnum(81, message.getDefault_nested_enum().getValue(), result, position);
				}
				System.out.println(position);
				if (message.hasDefault_foreign_enum()) {
					position = ProtobufOutputStream.writeEnum(82, message.getDefault_foreign_enum().getValue(), result, position);
				}
				System.out.println(position);
				if (message.hasDefault_import_enum()) {
					position = ProtobufOutputStream.writeEnum(83, message.getDefault_import_enum().getValue(), result, position);
				}
				System.out.println(position);
				if (message.hasDefault_string_piece()) {
					position = ProtobufOutputStream.writeString(84, default_string_pieceBuffer, result, position);
					System.out.println(position);
				}
				if (message.hasDefault_cord()) {
					position = ProtobufOutputStream.writeString(85, default_cordBuffer, result, position);
					System.out.println(position);
				}
				ProtobufOutputStream.checkNoSpaceLeft(result, position);
				return result;
			} catch (IOException e) {
				throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
			}
		}

		private static void assertInitialized(protobuf_memless_unittest.UnittestProto.TestAllTypes message) {
		}
	}

	public interface TestDeprecatedFields {
		@Deprecated
		boolean hasDeprecated_int32();

		@Deprecated
		int getDeprecated_int32();

		@Deprecated
		void setDeprecated_int32(int deprecated_int32);
	}

	public static class TestDeprecatedFieldsSerializer {
		public static byte[] serialize(protobuf_memless_unittest.UnittestProto.TestDeprecatedFields message) {
			try {
				assertInitialized(message);
				int totalSize = 0;
				if (message.hasDeprecated_int32()) {
					totalSize += ProtobufOutputStream.computeInt32Size(1, message.getDeprecated_int32());
					System.out.println(totalSize);
				}
				final byte[] result = new byte[totalSize];
				int position = 0;
				if (message.hasDeprecated_int32()) {
					position = ProtobufOutputStream.writeInt32(1, message.getDeprecated_int32(), result, position);
				}
				System.out.println(position);
				ProtobufOutputStream.checkNoSpaceLeft(result, position);
				return result;
			} catch (IOException e) {
				throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
			}
		}

		private static void assertInitialized(protobuf_memless_unittest.UnittestProto.TestDeprecatedFields message) {
		}
	}

	public interface ForeignMessage {
		boolean hasC();

		int getC();

		void setC(int c);
	}

	public static class ForeignMessageSerializer {
		public static byte[] serialize(protobuf_memless_unittest.UnittestProto.ForeignMessage message) {
			try {
				assertInitialized(message);
				int totalSize = 0;
				if (message.hasC()) {
					totalSize += ProtobufOutputStream.computeInt32Size(1, message.getC());
					System.out.println(totalSize);
				}
				final byte[] result = new byte[totalSize];
				int position = 0;
				if (message.hasC()) {
					position = ProtobufOutputStream.writeInt32(1, message.getC(), result, position);
				}
				System.out.println(position);
				ProtobufOutputStream.checkNoSpaceLeft(result, position);
				return result;
			} catch (IOException e) {
				throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
			}
		}

		private static void assertInitialized(protobuf_memless_unittest.UnittestProto.ForeignMessage message) {
		}
	}

	public interface TestAllExtensions {
	}

	public static class TestAllExtensionsSerializer {
		public static byte[] serialize(protobuf_memless_unittest.UnittestProto.TestAllExtensions message) {
			return new byte[0];
		}
	}

	public interface TestNestedExtension {
		boolean hasTest();

		String getTest();

		void setTest(String test);
	}

	public static class TestNestedExtensionSerializer {
		public static byte[] serialize(protobuf_memless_unittest.UnittestProto.TestNestedExtension message) {
			try {
				assertInitialized(message);
				int totalSize = 0;
				byte[] testBuffer = null;
				if (message.hasTest()) {
					testBuffer = message.getTest().getBytes("UTF-8");
					totalSize += testBuffer.length;
					totalSize += ProtobufOutputStream.computeRawVarint32Size(1002);
					totalSize += ProtobufOutputStream.computeRawVarint32Size(testBuffer.length);
					System.out.println(totalSize);
				}
				final byte[] result = new byte[totalSize];
				int position = 0;
				if (message.hasTest()) {
					position = ProtobufOutputStream.writeString(1002, testBuffer, result, position);
					System.out.println(position);
				}
				ProtobufOutputStream.checkNoSpaceLeft(result, position);
				return result;
			} catch (IOException e) {
				throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
			}
		}

		private static void assertInitialized(protobuf_memless_unittest.UnittestProto.TestNestedExtension message) {
		}
	}

	public interface TestRequired {
		boolean hasA();

		int getA();

		void setA(int a);

		boolean hasDummy2();

		int getDummy2();

		void setDummy2(int dummy2);

		boolean hasB();

		int getB();

		void setB(int b);

		boolean hasSingle();

		protobuf_memless_unittest.UnittestProto.TestRequired getSingle();

		void setSingle(protobuf_memless_unittest.UnittestProto.TestRequired single);

		boolean hasMulti();

		java.util.List<protobuf_memless_unittest.UnittestProto.TestRequired> getMulti();

		void setMulti(java.util.List<protobuf_memless_unittest.UnittestProto.TestRequired> multi);

		boolean hasDummy4();

		int getDummy4();

		void setDummy4(int dummy4);

		boolean hasDummy5();

		int getDummy5();

		void setDummy5(int dummy5);

		boolean hasDummy6();

		int getDummy6();

		void setDummy6(int dummy6);

		boolean hasDummy7();

		int getDummy7();

		void setDummy7(int dummy7);

		boolean hasDummy8();

		int getDummy8();

		void setDummy8(int dummy8);

		boolean hasDummy9();

		int getDummy9();

		void setDummy9(int dummy9);

		boolean hasDummy10();

		int getDummy10();

		void setDummy10(int dummy10);

		boolean hasDummy11();

		int getDummy11();

		void setDummy11(int dummy11);

		boolean hasDummy12();

		int getDummy12();

		void setDummy12(int dummy12);

		boolean hasDummy13();

		int getDummy13();

		void setDummy13(int dummy13);

		boolean hasDummy14();

		int getDummy14();

		void setDummy14(int dummy14);

		boolean hasDummy15();

		int getDummy15();

		void setDummy15(int dummy15);

		boolean hasDummy16();

		int getDummy16();

		void setDummy16(int dummy16);

		boolean hasDummy17();

		int getDummy17();

		void setDummy17(int dummy17);

		boolean hasDummy18();

		int getDummy18();

		void setDummy18(int dummy18);

		boolean hasDummy19();

		int getDummy19();

		void setDummy19(int dummy19);

		boolean hasDummy20();

		int getDummy20();

		void setDummy20(int dummy20);

		boolean hasDummy21();

		int getDummy21();

		void setDummy21(int dummy21);

		boolean hasDummy22();

		int getDummy22();

		void setDummy22(int dummy22);

		boolean hasDummy23();

		int getDummy23();

		void setDummy23(int dummy23);

		boolean hasDummy24();

		int getDummy24();

		void setDummy24(int dummy24);

		boolean hasDummy25();

		int getDummy25();

		void setDummy25(int dummy25);

		boolean hasDummy26();

		int getDummy26();

		void setDummy26(int dummy26);

		boolean hasDummy27();

		int getDummy27();

		void setDummy27(int dummy27);

		boolean hasDummy28();

		int getDummy28();

		void setDummy28(int dummy28);

		boolean hasDummy29();

		int getDummy29();

		void setDummy29(int dummy29);

		boolean hasDummy30();

		int getDummy30();

		void setDummy30(int dummy30);

		boolean hasDummy31();

		int getDummy31();

		void setDummy31(int dummy31);

		boolean hasDummy32();

		int getDummy32();

		void setDummy32(int dummy32);

		boolean hasC();

		int getC();

		void setC(int c);
	}

	public static class TestRequiredSerializer {
		public static byte[] serialize(protobuf_memless_unittest.UnittestProto.TestRequired message) {
			try {
				assertInitialized(message);
				int totalSize = 0;
				if (message.hasA()) {
					totalSize += ProtobufOutputStream.computeInt32Size(1, message.getA());
					System.out.println(totalSize);
				}
				if (message.hasDummy2()) {
					totalSize += ProtobufOutputStream.computeInt32Size(2, message.getDummy2());
					System.out.println(totalSize);
				}
				if (message.hasB()) {
					totalSize += ProtobufOutputStream.computeInt32Size(3, message.getB());
					System.out.println(totalSize);
				}
				byte[] singleBuffer = null;
				if (message.hasSingle()) {
					singleBuffer = protobuf_memless_unittest.UnittestProto.TestRequiredSerializer.serialize(message.getSingle());
					totalSize += singleBuffer.length;
					System.out.println(totalSize);
				}
				byte[] multiBuffer = null;
				if (message.hasMulti()) {
					java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
					totalSize += ProtobufOutputStream.computeRawVarint32Size(1001);
					totalSize += ProtobufOutputStream.computeRawVarint32Size(message.getMulti().size());
					for (int i = 0; i < message.getMulti().size(); i++) {
						baos.write(protobuf_memless_unittest.UnittestProto.TestRequiredSerializer.serialize(message.getMulti().get(i)));
					}
					multiBuffer = baos.toByteArray();
					totalSize += multiBuffer.length;
					System.out.println(totalSize);
				}
				if (message.hasDummy4()) {
					totalSize += ProtobufOutputStream.computeInt32Size(4, message.getDummy4());
					System.out.println(totalSize);
				}
				if (message.hasDummy5()) {
					totalSize += ProtobufOutputStream.computeInt32Size(5, message.getDummy5());
					System.out.println(totalSize);
				}
				if (message.hasDummy6()) {
					totalSize += ProtobufOutputStream.computeInt32Size(6, message.getDummy6());
					System.out.println(totalSize);
				}
				if (message.hasDummy7()) {
					totalSize += ProtobufOutputStream.computeInt32Size(7, message.getDummy7());
					System.out.println(totalSize);
				}
				if (message.hasDummy8()) {
					totalSize += ProtobufOutputStream.computeInt32Size(8, message.getDummy8());
					System.out.println(totalSize);
				}
				if (message.hasDummy9()) {
					totalSize += ProtobufOutputStream.computeInt32Size(9, message.getDummy9());
					System.out.println(totalSize);
				}
				if (message.hasDummy10()) {
					totalSize += ProtobufOutputStream.computeInt32Size(10, message.getDummy10());
					System.out.println(totalSize);
				}
				if (message.hasDummy11()) {
					totalSize += ProtobufOutputStream.computeInt32Size(11, message.getDummy11());
					System.out.println(totalSize);
				}
				if (message.hasDummy12()) {
					totalSize += ProtobufOutputStream.computeInt32Size(12, message.getDummy12());
					System.out.println(totalSize);
				}
				if (message.hasDummy13()) {
					totalSize += ProtobufOutputStream.computeInt32Size(13, message.getDummy13());
					System.out.println(totalSize);
				}
				if (message.hasDummy14()) {
					totalSize += ProtobufOutputStream.computeInt32Size(14, message.getDummy14());
					System.out.println(totalSize);
				}
				if (message.hasDummy15()) {
					totalSize += ProtobufOutputStream.computeInt32Size(15, message.getDummy15());
					System.out.println(totalSize);
				}
				if (message.hasDummy16()) {
					totalSize += ProtobufOutputStream.computeInt32Size(16, message.getDummy16());
					System.out.println(totalSize);
				}
				if (message.hasDummy17()) {
					totalSize += ProtobufOutputStream.computeInt32Size(17, message.getDummy17());
					System.out.println(totalSize);
				}
				if (message.hasDummy18()) {
					totalSize += ProtobufOutputStream.computeInt32Size(18, message.getDummy18());
					System.out.println(totalSize);
				}
				if (message.hasDummy19()) {
					totalSize += ProtobufOutputStream.computeInt32Size(19, message.getDummy19());
					System.out.println(totalSize);
				}
				if (message.hasDummy20()) {
					totalSize += ProtobufOutputStream.computeInt32Size(20, message.getDummy20());
					System.out.println(totalSize);
				}
				if (message.hasDummy21()) {
					totalSize += ProtobufOutputStream.computeInt32Size(21, message.getDummy21());
					System.out.println(totalSize);
				}
				if (message.hasDummy22()) {
					totalSize += ProtobufOutputStream.computeInt32Size(22, message.getDummy22());
					System.out.println(totalSize);
				}
				if (message.hasDummy23()) {
					totalSize += ProtobufOutputStream.computeInt32Size(23, message.getDummy23());
					System.out.println(totalSize);
				}
				if (message.hasDummy24()) {
					totalSize += ProtobufOutputStream.computeInt32Size(24, message.getDummy24());
					System.out.println(totalSize);
				}
				if (message.hasDummy25()) {
					totalSize += ProtobufOutputStream.computeInt32Size(25, message.getDummy25());
					System.out.println(totalSize);
				}
				if (message.hasDummy26()) {
					totalSize += ProtobufOutputStream.computeInt32Size(26, message.getDummy26());
					System.out.println(totalSize);
				}
				if (message.hasDummy27()) {
					totalSize += ProtobufOutputStream.computeInt32Size(27, message.getDummy27());
					System.out.println(totalSize);
				}
				if (message.hasDummy28()) {
					totalSize += ProtobufOutputStream.computeInt32Size(28, message.getDummy28());
					System.out.println(totalSize);
				}
				if (message.hasDummy29()) {
					totalSize += ProtobufOutputStream.computeInt32Size(29, message.getDummy29());
					System.out.println(totalSize);
				}
				if (message.hasDummy30()) {
					totalSize += ProtobufOutputStream.computeInt32Size(30, message.getDummy30());
					System.out.println(totalSize);
				}
				if (message.hasDummy31()) {
					totalSize += ProtobufOutputStream.computeInt32Size(31, message.getDummy31());
					System.out.println(totalSize);
				}
				if (message.hasDummy32()) {
					totalSize += ProtobufOutputStream.computeInt32Size(32, message.getDummy32());
					System.out.println(totalSize);
				}
				if (message.hasC()) {
					totalSize += ProtobufOutputStream.computeInt32Size(33, message.getC());
					System.out.println(totalSize);
				}
				final byte[] result = new byte[totalSize];
				int position = 0;
				if (message.hasA()) {
					position = ProtobufOutputStream.writeInt32(1, message.getA(), result, position);
				}
				System.out.println(position);
				if (message.hasDummy2()) {
					position = ProtobufOutputStream.writeInt32(2, message.getDummy2(), result, position);
				}
				System.out.println(position);
				if (message.hasB()) {
					position = ProtobufOutputStream.writeInt32(3, message.getB(), result, position);
				}
				System.out.println(position);
				if (message.hasSingle()) {
					position = ProtobufOutputStream.writeBytes(1000, singleBuffer, result, position);
				}
				System.out.println(position);
				if (message.hasMulti()) {
					if (message.getMulti().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(1001, result, position);
						position = ProtobufOutputStream.writeRawVarint32(multiBuffer.length, result, position);
						position = ProtobufOutputStream.writeRawBytes(multiBuffer, result, position);
						System.out.println(position);
					}
				}
				if (message.hasDummy4()) {
					position = ProtobufOutputStream.writeInt32(4, message.getDummy4(), result, position);
				}
				System.out.println(position);
				if (message.hasDummy5()) {
					position = ProtobufOutputStream.writeInt32(5, message.getDummy5(), result, position);
				}
				System.out.println(position);
				if (message.hasDummy6()) {
					position = ProtobufOutputStream.writeInt32(6, message.getDummy6(), result, position);
				}
				System.out.println(position);
				if (message.hasDummy7()) {
					position = ProtobufOutputStream.writeInt32(7, message.getDummy7(), result, position);
				}
				System.out.println(position);
				if (message.hasDummy8()) {
					position = ProtobufOutputStream.writeInt32(8, message.getDummy8(), result, position);
				}
				System.out.println(position);
				if (message.hasDummy9()) {
					position = ProtobufOutputStream.writeInt32(9, message.getDummy9(), result, position);
				}
				System.out.println(position);
				if (message.hasDummy10()) {
					position = ProtobufOutputStream.writeInt32(10, message.getDummy10(), result, position);
				}
				System.out.println(position);
				if (message.hasDummy11()) {
					position = ProtobufOutputStream.writeInt32(11, message.getDummy11(), result, position);
				}
				System.out.println(position);
				if (message.hasDummy12()) {
					position = ProtobufOutputStream.writeInt32(12, message.getDummy12(), result, position);
				}
				System.out.println(position);
				if (message.hasDummy13()) {
					position = ProtobufOutputStream.writeInt32(13, message.getDummy13(), result, position);
				}
				System.out.println(position);
				if (message.hasDummy14()) {
					position = ProtobufOutputStream.writeInt32(14, message.getDummy14(), result, position);
				}
				System.out.println(position);
				if (message.hasDummy15()) {
					position = ProtobufOutputStream.writeInt32(15, message.getDummy15(), result, position);
				}
				System.out.println(position);
				if (message.hasDummy16()) {
					position = ProtobufOutputStream.writeInt32(16, message.getDummy16(), result, position);
				}
				System.out.println(position);
				if (message.hasDummy17()) {
					position = ProtobufOutputStream.writeInt32(17, message.getDummy17(), result, position);
				}
				System.out.println(position);
				if (message.hasDummy18()) {
					position = ProtobufOutputStream.writeInt32(18, message.getDummy18(), result, position);
				}
				System.out.println(position);
				if (message.hasDummy19()) {
					position = ProtobufOutputStream.writeInt32(19, message.getDummy19(), result, position);
				}
				System.out.println(position);
				if (message.hasDummy20()) {
					position = ProtobufOutputStream.writeInt32(20, message.getDummy20(), result, position);
				}
				System.out.println(position);
				if (message.hasDummy21()) {
					position = ProtobufOutputStream.writeInt32(21, message.getDummy21(), result, position);
				}
				System.out.println(position);
				if (message.hasDummy22()) {
					position = ProtobufOutputStream.writeInt32(22, message.getDummy22(), result, position);
				}
				System.out.println(position);
				if (message.hasDummy23()) {
					position = ProtobufOutputStream.writeInt32(23, message.getDummy23(), result, position);
				}
				System.out.println(position);
				if (message.hasDummy24()) {
					position = ProtobufOutputStream.writeInt32(24, message.getDummy24(), result, position);
				}
				System.out.println(position);
				if (message.hasDummy25()) {
					position = ProtobufOutputStream.writeInt32(25, message.getDummy25(), result, position);
				}
				System.out.println(position);
				if (message.hasDummy26()) {
					position = ProtobufOutputStream.writeInt32(26, message.getDummy26(), result, position);
				}
				System.out.println(position);
				if (message.hasDummy27()) {
					position = ProtobufOutputStream.writeInt32(27, message.getDummy27(), result, position);
				}
				System.out.println(position);
				if (message.hasDummy28()) {
					position = ProtobufOutputStream.writeInt32(28, message.getDummy28(), result, position);
				}
				System.out.println(position);
				if (message.hasDummy29()) {
					position = ProtobufOutputStream.writeInt32(29, message.getDummy29(), result, position);
				}
				System.out.println(position);
				if (message.hasDummy30()) {
					position = ProtobufOutputStream.writeInt32(30, message.getDummy30(), result, position);
				}
				System.out.println(position);
				if (message.hasDummy31()) {
					position = ProtobufOutputStream.writeInt32(31, message.getDummy31(), result, position);
				}
				System.out.println(position);
				if (message.hasDummy32()) {
					position = ProtobufOutputStream.writeInt32(32, message.getDummy32(), result, position);
				}
				System.out.println(position);
				if (message.hasC()) {
					position = ProtobufOutputStream.writeInt32(33, message.getC(), result, position);
				}
				System.out.println(position);
				ProtobufOutputStream.checkNoSpaceLeft(result, position);
				return result;
			} catch (IOException e) {
				throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
			}
		}

		private static void assertInitialized(protobuf_memless_unittest.UnittestProto.TestRequired message) {
			if (!message.hasA()) {
				throw new IllegalArgumentException("Required field not initialized: a");
			}
			if (!message.hasB()) {
				throw new IllegalArgumentException("Required field not initialized: b");
			}
			if (!message.hasC()) {
				throw new IllegalArgumentException("Required field not initialized: c");
			}
		}
	}

	public interface TestRequiredForeign {
		boolean hasOptional_message();

		protobuf_memless_unittest.UnittestProto.TestRequired getOptional_message();

		void setOptional_message(protobuf_memless_unittest.UnittestProto.TestRequired optional_message);

		boolean hasRepeated_message();

		java.util.List<protobuf_memless_unittest.UnittestProto.TestRequired> getRepeated_message();

		void setRepeated_message(java.util.List<protobuf_memless_unittest.UnittestProto.TestRequired> repeated_message);

		boolean hasDummy();

		int getDummy();

		void setDummy(int dummy);
	}

	public static class TestRequiredForeignSerializer {
		public static byte[] serialize(protobuf_memless_unittest.UnittestProto.TestRequiredForeign message) {
			try {
				assertInitialized(message);
				int totalSize = 0;
				byte[] optional_messageBuffer = null;
				if (message.hasOptional_message()) {
					optional_messageBuffer = protobuf_memless_unittest.UnittestProto.TestRequiredSerializer.serialize(message.getOptional_message());
					totalSize += optional_messageBuffer.length;
					System.out.println(totalSize);
				}
				byte[] repeated_messageBuffer = null;
				if (message.hasRepeated_message()) {
					java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
					totalSize += ProtobufOutputStream.computeRawVarint32Size(2);
					totalSize += ProtobufOutputStream.computeRawVarint32Size(message.getRepeated_message().size());
					for (int i = 0; i < message.getRepeated_message().size(); i++) {
						baos.write(protobuf_memless_unittest.UnittestProto.TestRequiredSerializer.serialize(message.getRepeated_message().get(i)));
					}
					repeated_messageBuffer = baos.toByteArray();
					totalSize += repeated_messageBuffer.length;
					System.out.println(totalSize);
				}
				if (message.hasDummy()) {
					totalSize += ProtobufOutputStream.computeInt32Size(3, message.getDummy());
					System.out.println(totalSize);
				}
				final byte[] result = new byte[totalSize];
				int position = 0;
				if (message.hasOptional_message()) {
					position = ProtobufOutputStream.writeBytes(1, optional_messageBuffer, result, position);
				}
				System.out.println(position);
				if (message.hasRepeated_message()) {
					if (message.getRepeated_message().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(2, result, position);
						position = ProtobufOutputStream.writeRawVarint32(repeated_messageBuffer.length, result, position);
						position = ProtobufOutputStream.writeRawBytes(repeated_messageBuffer, result, position);
						System.out.println(position);
					}
				}
				if (message.hasDummy()) {
					position = ProtobufOutputStream.writeInt32(3, message.getDummy(), result, position);
				}
				System.out.println(position);
				ProtobufOutputStream.checkNoSpaceLeft(result, position);
				return result;
			} catch (IOException e) {
				throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
			}
		}

		private static void assertInitialized(protobuf_memless_unittest.UnittestProto.TestRequiredForeign message) {
		}
	}

	public interface TestForeignNested {
		boolean hasForeign_nested();

		protobuf_memless_unittest.UnittestProto.TestAllTypes.NestedMessage getForeign_nested();

		void setForeign_nested(protobuf_memless_unittest.UnittestProto.TestAllTypes.NestedMessage foreign_nested);
	}

	public static class TestForeignNestedSerializer {
		public static byte[] serialize(protobuf_memless_unittest.UnittestProto.TestForeignNested message) {
			try {
				assertInitialized(message);
				int totalSize = 0;
				byte[] foreign_nestedBuffer = null;
				if (message.hasForeign_nested()) {
					foreign_nestedBuffer = protobuf_memless_unittest.UnittestProto.TestAllTypes.NestedMessageSerializer.serialize(message.getForeign_nested());
					totalSize += foreign_nestedBuffer.length;
					System.out.println(totalSize);
				}
				final byte[] result = new byte[totalSize];
				int position = 0;
				if (message.hasForeign_nested()) {
					position = ProtobufOutputStream.writeBytes(1, foreign_nestedBuffer, result, position);
				}
				System.out.println(position);
				ProtobufOutputStream.checkNoSpaceLeft(result, position);
				return result;
			} catch (IOException e) {
				throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
			}
		}

		private static void assertInitialized(protobuf_memless_unittest.UnittestProto.TestForeignNested message) {
		}
	}

	public interface TestEmptyMessage {
	}

	public static class TestEmptyMessageSerializer {
		public static byte[] serialize(protobuf_memless_unittest.UnittestProto.TestEmptyMessage message) {
			return new byte[0];
		}
	}

	public interface TestEmptyMessageWithExtensions {
	}

	public static class TestEmptyMessageWithExtensionsSerializer {
		public static byte[] serialize(protobuf_memless_unittest.UnittestProto.TestEmptyMessageWithExtensions message) {
			return new byte[0];
		}
	}

	public interface TestMultipleExtensionRanges {
	}

	public static class TestMultipleExtensionRangesSerializer {
		public static byte[] serialize(protobuf_memless_unittest.UnittestProto.TestMultipleExtensionRanges message) {
			return new byte[0];
		}
	}

	public interface TestReallyLargeTagNumber {
		boolean hasA();

		int getA();

		void setA(int a);

		boolean hasBb();

		int getBb();

		void setBb(int bb);
	}

	public static class TestReallyLargeTagNumberSerializer {
		public static byte[] serialize(protobuf_memless_unittest.UnittestProto.TestReallyLargeTagNumber message) {
			try {
				assertInitialized(message);
				int totalSize = 0;
				if (message.hasA()) {
					totalSize += ProtobufOutputStream.computeInt32Size(1, message.getA());
					System.out.println(totalSize);
				}
				if (message.hasBb()) {
					totalSize += ProtobufOutputStream.computeInt32Size(268435455, message.getBb());
					System.out.println(totalSize);
				}
				final byte[] result = new byte[totalSize];
				int position = 0;
				if (message.hasA()) {
					position = ProtobufOutputStream.writeInt32(1, message.getA(), result, position);
				}
				System.out.println(position);
				if (message.hasBb()) {
					position = ProtobufOutputStream.writeInt32(268435455, message.getBb(), result, position);
				}
				System.out.println(position);
				ProtobufOutputStream.checkNoSpaceLeft(result, position);
				return result;
			} catch (IOException e) {
				throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
			}
		}

		private static void assertInitialized(protobuf_memless_unittest.UnittestProto.TestReallyLargeTagNumber message) {
		}
	}

	public interface TestRecursiveMessage {
		boolean hasA();

		protobuf_memless_unittest.UnittestProto.TestRecursiveMessage getA();

		void setA(protobuf_memless_unittest.UnittestProto.TestRecursiveMessage a);

		boolean hasI();

		int getI();

		void setI(int i);
	}

	public static class TestRecursiveMessageSerializer {
		public static byte[] serialize(protobuf_memless_unittest.UnittestProto.TestRecursiveMessage message) {
			try {
				assertInitialized(message);
				int totalSize = 0;
				byte[] aBuffer = null;
				if (message.hasA()) {
					aBuffer = protobuf_memless_unittest.UnittestProto.TestRecursiveMessageSerializer.serialize(message.getA());
					totalSize += aBuffer.length;
					System.out.println(totalSize);
				}
				if (message.hasI()) {
					totalSize += ProtobufOutputStream.computeInt32Size(2, message.getI());
					System.out.println(totalSize);
				}
				final byte[] result = new byte[totalSize];
				int position = 0;
				if (message.hasA()) {
					position = ProtobufOutputStream.writeBytes(1, aBuffer, result, position);
				}
				System.out.println(position);
				if (message.hasI()) {
					position = ProtobufOutputStream.writeInt32(2, message.getI(), result, position);
				}
				System.out.println(position);
				ProtobufOutputStream.checkNoSpaceLeft(result, position);
				return result;
			} catch (IOException e) {
				throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
			}
		}

		private static void assertInitialized(protobuf_memless_unittest.UnittestProto.TestRecursiveMessage message) {
		}
	}

	public interface TestMutualRecursionA {
		boolean hasBb();

		protobuf_memless_unittest.UnittestProto.TestMutualRecursionB getBb();

		void setBb(protobuf_memless_unittest.UnittestProto.TestMutualRecursionB bb);
	}

	public static class TestMutualRecursionASerializer {
		public static byte[] serialize(protobuf_memless_unittest.UnittestProto.TestMutualRecursionA message) {
			try {
				assertInitialized(message);
				int totalSize = 0;
				byte[] bbBuffer = null;
				if (message.hasBb()) {
					bbBuffer = protobuf_memless_unittest.UnittestProto.TestMutualRecursionBSerializer.serialize(message.getBb());
					totalSize += bbBuffer.length;
					System.out.println(totalSize);
				}
				final byte[] result = new byte[totalSize];
				int position = 0;
				if (message.hasBb()) {
					position = ProtobufOutputStream.writeBytes(1, bbBuffer, result, position);
				}
				System.out.println(position);
				ProtobufOutputStream.checkNoSpaceLeft(result, position);
				return result;
			} catch (IOException e) {
				throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
			}
		}

		private static void assertInitialized(protobuf_memless_unittest.UnittestProto.TestMutualRecursionA message) {
		}
	}

	public interface TestMutualRecursionB {
		boolean hasA();

		protobuf_memless_unittest.UnittestProto.TestMutualRecursionA getA();

		void setA(protobuf_memless_unittest.UnittestProto.TestMutualRecursionA a);

		boolean hasOptional_int32();

		int getOptional_int32();

		void setOptional_int32(int optional_int32);
	}

	public static class TestMutualRecursionBSerializer {
		public static byte[] serialize(protobuf_memless_unittest.UnittestProto.TestMutualRecursionB message) {
			try {
				assertInitialized(message);
				int totalSize = 0;
				byte[] aBuffer = null;
				if (message.hasA()) {
					aBuffer = protobuf_memless_unittest.UnittestProto.TestMutualRecursionASerializer.serialize(message.getA());
					totalSize += aBuffer.length;
					System.out.println(totalSize);
				}
				if (message.hasOptional_int32()) {
					totalSize += ProtobufOutputStream.computeInt32Size(2, message.getOptional_int32());
					System.out.println(totalSize);
				}
				final byte[] result = new byte[totalSize];
				int position = 0;
				if (message.hasA()) {
					position = ProtobufOutputStream.writeBytes(1, aBuffer, result, position);
				}
				System.out.println(position);
				if (message.hasOptional_int32()) {
					position = ProtobufOutputStream.writeInt32(2, message.getOptional_int32(), result, position);
				}
				System.out.println(position);
				ProtobufOutputStream.checkNoSpaceLeft(result, position);
				return result;
			} catch (IOException e) {
				throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
			}
		}

		private static void assertInitialized(protobuf_memless_unittest.UnittestProto.TestMutualRecursionB message) {
		}
	}

	public interface TestDupFieldNumber {
		boolean hasA();

		int getA();

		void setA(int a);
	}

	public static class TestDupFieldNumberSerializer {
		public static byte[] serialize(protobuf_memless_unittest.UnittestProto.TestDupFieldNumber message) {
			try {
				assertInitialized(message);
				int totalSize = 0;
				if (message.hasA()) {
					totalSize += ProtobufOutputStream.computeInt32Size(1, message.getA());
					System.out.println(totalSize);
				}
				final byte[] result = new byte[totalSize];
				int position = 0;
				if (message.hasA()) {
					position = ProtobufOutputStream.writeInt32(1, message.getA(), result, position);
				}
				System.out.println(position);
				ProtobufOutputStream.checkNoSpaceLeft(result, position);
				return result;
			} catch (IOException e) {
				throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
			}
		}

		private static void assertInitialized(protobuf_memless_unittest.UnittestProto.TestDupFieldNumber message) {
		}
	}

	public interface TestNestedMessageHasBits {
		boolean hasOptional_nested_message();

		protobuf_memless_unittest.UnittestProto.TestNestedMessageHasBits.NestedMessage getOptional_nested_message();

		void setOptional_nested_message(protobuf_memless_unittest.UnittestProto.TestNestedMessageHasBits.NestedMessage optional_nested_message);

		public interface NestedMessage {
			boolean hasNestedmessage_repeated_int32();

			java.util.List<Integer> getNestedmessage_repeated_int32();

			void setNestedmessage_repeated_int32(java.util.List<Integer> nestedmessage_repeated_int32);

			boolean hasNestedmessage_repeated_foreignmessage();

			java.util.List<protobuf_memless_unittest.UnittestProto.ForeignMessage> getNestedmessage_repeated_foreignmessage();

			void setNestedmessage_repeated_foreignmessage(java.util.List<protobuf_memless_unittest.UnittestProto.ForeignMessage> nestedmessage_repeated_foreignmessage);
		}

		public static class NestedMessageSerializer {
			public static byte[] serialize(protobuf_memless_unittest.UnittestProto.TestNestedMessageHasBits.NestedMessage message) {
				try {
					assertInitialized(message);
					int totalSize = 0;
					int nestedmessage_repeated_int32Size = 0;
					if (message.hasNestedmessage_repeated_int32()) {
						for (int i = 0; i < message.getNestedmessage_repeated_int32().size(); i++) {
							nestedmessage_repeated_int32Size += ProtobufOutputStream.computeInt32Size(1, message.getNestedmessage_repeated_int32().get(i));
						}
						totalSize += nestedmessage_repeated_int32Size;
					}
					System.out.println(totalSize);
					byte[] nestedmessage_repeated_foreignmessageBuffer = null;
					if (message.hasNestedmessage_repeated_foreignmessage()) {
						java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
						totalSize += ProtobufOutputStream.computeRawVarint32Size(2);
						totalSize += ProtobufOutputStream.computeRawVarint32Size(message.getNestedmessage_repeated_foreignmessage().size());
						for (int i = 0; i < message.getNestedmessage_repeated_foreignmessage().size(); i++) {
							baos.write(protobuf_memless_unittest.UnittestProto.ForeignMessageSerializer.serialize(message.getNestedmessage_repeated_foreignmessage().get(i)));
						}
						nestedmessage_repeated_foreignmessageBuffer = baos.toByteArray();
						totalSize += nestedmessage_repeated_foreignmessageBuffer.length;
						System.out.println(totalSize);
					}
					final byte[] result = new byte[totalSize];
					int position = 0;
					if (message.hasNestedmessage_repeated_int32()) {
						if (message.getNestedmessage_repeated_int32().size() > 0) {
							position = ProtobufOutputStream.writeRawVarint32(1, result, position);
							position = ProtobufOutputStream.writeRawVarint32(nestedmessage_repeated_int32Size, result, position);
							for (int i = 0; i < message.getNestedmessage_repeated_int32().size(); i++) {
								position = ProtobufOutputStream.writeInt32NoTag(message.getNestedmessage_repeated_int32().get(i), result, position);
							}
							System.out.println(position);
						}
					}
					if (message.hasNestedmessage_repeated_foreignmessage()) {
						if (message.getNestedmessage_repeated_foreignmessage().size() > 0) {
							position = ProtobufOutputStream.writeRawVarint32(2, result, position);
							position = ProtobufOutputStream.writeRawVarint32(nestedmessage_repeated_foreignmessageBuffer.length, result, position);
							position = ProtobufOutputStream.writeRawBytes(nestedmessage_repeated_foreignmessageBuffer, result, position);
							System.out.println(position);
						}
					}
					ProtobufOutputStream.checkNoSpaceLeft(result, position);
					return result;
				} catch (IOException e) {
					throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
				}
			}

			private static void assertInitialized(protobuf_memless_unittest.UnittestProto.TestNestedMessageHasBits.NestedMessage message) {
			}
		}
	}

	public static class TestNestedMessageHasBitsSerializer {
		public static byte[] serialize(protobuf_memless_unittest.UnittestProto.TestNestedMessageHasBits message) {
			try {
				assertInitialized(message);
				int totalSize = 0;
				byte[] optional_nested_messageBuffer = null;
				if (message.hasOptional_nested_message()) {
					optional_nested_messageBuffer = protobuf_memless_unittest.UnittestProto.TestNestedMessageHasBits.NestedMessageSerializer.serialize(message.getOptional_nested_message());
					totalSize += optional_nested_messageBuffer.length;
					System.out.println(totalSize);
				}
				final byte[] result = new byte[totalSize];
				int position = 0;
				if (message.hasOptional_nested_message()) {
					position = ProtobufOutputStream.writeBytes(1, optional_nested_messageBuffer, result, position);
				}
				System.out.println(position);
				ProtobufOutputStream.checkNoSpaceLeft(result, position);
				return result;
			} catch (IOException e) {
				throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
			}
		}

		private static void assertInitialized(protobuf_memless_unittest.UnittestProto.TestNestedMessageHasBits message) {
		}
	}

	public interface TestCamelCaseFieldNames {
		boolean hasPrimitiveField();

		int getPrimitiveField();

		void setPrimitiveField(int PrimitiveField);

		boolean hasStringField();

		String getStringField();

		void setStringField(String StringField);

		boolean hasEnumField();

		protobuf_memless_unittest.UnittestProto.ForeignEnum getEnumField();

		void setEnumField(protobuf_memless_unittest.UnittestProto.ForeignEnum EnumField);

		boolean hasMessageField();

		protobuf_memless_unittest.UnittestProto.ForeignMessage getMessageField();

		void setMessageField(protobuf_memless_unittest.UnittestProto.ForeignMessage MessageField);

		boolean hasStringPieceField();

		String getStringPieceField();

		void setStringPieceField(String StringPieceField);

		boolean hasCordField();

		String getCordField();

		void setCordField(String CordField);

		boolean hasRepeatedPrimitiveField();

		java.util.List<Integer> getRepeatedPrimitiveField();

		void setRepeatedPrimitiveField(java.util.List<Integer> RepeatedPrimitiveField);

		boolean hasRepeatedStringField();

		java.util.List<String> getRepeatedStringField();

		void setRepeatedStringField(java.util.List<String> RepeatedStringField);

		boolean hasRepeatedEnumField();

		java.util.List<protobuf_memless_unittest.UnittestProto.ForeignEnum> getRepeatedEnumField();

		void setRepeatedEnumField(java.util.List<protobuf_memless_unittest.UnittestProto.ForeignEnum> RepeatedEnumField);

		boolean hasRepeatedMessageField();

		java.util.List<protobuf_memless_unittest.UnittestProto.ForeignMessage> getRepeatedMessageField();

		void setRepeatedMessageField(java.util.List<protobuf_memless_unittest.UnittestProto.ForeignMessage> RepeatedMessageField);

		boolean hasRepeatedStringPieceField();

		java.util.List<String> getRepeatedStringPieceField();

		void setRepeatedStringPieceField(java.util.List<String> RepeatedStringPieceField);

		boolean hasRepeatedCordField();

		java.util.List<String> getRepeatedCordField();

		void setRepeatedCordField(java.util.List<String> RepeatedCordField);
	}

	public static class TestCamelCaseFieldNamesSerializer {
		public static byte[] serialize(protobuf_memless_unittest.UnittestProto.TestCamelCaseFieldNames message) {
			try {
				assertInitialized(message);
				int totalSize = 0;
				if (message.hasPrimitiveField()) {
					totalSize += ProtobufOutputStream.computeInt32Size(1, message.getPrimitiveField());
					System.out.println(totalSize);
				}
				byte[] StringFieldBuffer = null;
				if (message.hasStringField()) {
					StringFieldBuffer = message.getStringField().getBytes("UTF-8");
					totalSize += StringFieldBuffer.length;
					totalSize += ProtobufOutputStream.computeRawVarint32Size(2);
					totalSize += ProtobufOutputStream.computeRawVarint32Size(StringFieldBuffer.length);
					System.out.println(totalSize);
				}
				if (message.hasEnumField()) {
					totalSize += ProtobufOutputStream.computeEnumSize(3, message.getEnumField().getValue());
					System.out.println(totalSize);
				}
				byte[] MessageFieldBuffer = null;
				if (message.hasMessageField()) {
					MessageFieldBuffer = protobuf_memless_unittest.UnittestProto.ForeignMessageSerializer.serialize(message.getMessageField());
					totalSize += MessageFieldBuffer.length;
					System.out.println(totalSize);
				}
				byte[] StringPieceFieldBuffer = null;
				if (message.hasStringPieceField()) {
					StringPieceFieldBuffer = message.getStringPieceField().getBytes("UTF-8");
					totalSize += StringPieceFieldBuffer.length;
					totalSize += ProtobufOutputStream.computeRawVarint32Size(5);
					totalSize += ProtobufOutputStream.computeRawVarint32Size(StringPieceFieldBuffer.length);
					System.out.println(totalSize);
				}
				byte[] CordFieldBuffer = null;
				if (message.hasCordField()) {
					CordFieldBuffer = message.getCordField().getBytes("UTF-8");
					totalSize += CordFieldBuffer.length;
					totalSize += ProtobufOutputStream.computeRawVarint32Size(6);
					totalSize += ProtobufOutputStream.computeRawVarint32Size(CordFieldBuffer.length);
					System.out.println(totalSize);
				}
				int RepeatedPrimitiveFieldSize = 0;
				if (message.hasRepeatedPrimitiveField()) {
					for (int i = 0; i < message.getRepeatedPrimitiveField().size(); i++) {
						RepeatedPrimitiveFieldSize += ProtobufOutputStream.computeInt32Size(7, message.getRepeatedPrimitiveField().get(i));
					}
					totalSize += RepeatedPrimitiveFieldSize;
				}
				System.out.println(totalSize);
				byte[] RepeatedStringFieldBuffer = null;
				if (message.hasRepeatedStringField()) {
					java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
					for (int i = 0; i < message.getRepeatedStringField().size(); i++) {
						ProtobufOutputStream.writeString(8, message.getRepeatedStringField().get(i), baos);
					}
					RepeatedStringFieldBuffer = baos.toByteArray();
					totalSize += ProtobufOutputStream.computeRawVarint32Size(8);
					totalSize += ProtobufOutputStream.computeRawVarint32Size(RepeatedStringFieldBuffer.length);
					totalSize += RepeatedStringFieldBuffer.length;
					System.out.println(totalSize);
				}
				int RepeatedEnumFieldSize = 0;
				if (message.hasRepeatedEnumField()) {
					for (int i = 0; i < message.getRepeatedEnumField().size(); i++) {
						RepeatedEnumFieldSize += ProtobufOutputStream.computeEnumSize(9, message.getRepeatedEnumField().get(i).getValue());
					}
					totalSize += RepeatedEnumFieldSize;
				}
				System.out.println(totalSize);
				byte[] RepeatedMessageFieldBuffer = null;
				if (message.hasRepeatedMessageField()) {
					java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
					totalSize += ProtobufOutputStream.computeRawVarint32Size(10);
					totalSize += ProtobufOutputStream.computeRawVarint32Size(message.getRepeatedMessageField().size());
					for (int i = 0; i < message.getRepeatedMessageField().size(); i++) {
						baos.write(protobuf_memless_unittest.UnittestProto.ForeignMessageSerializer.serialize(message.getRepeatedMessageField().get(i)));
					}
					RepeatedMessageFieldBuffer = baos.toByteArray();
					totalSize += RepeatedMessageFieldBuffer.length;
					System.out.println(totalSize);
				}
				byte[] RepeatedStringPieceFieldBuffer = null;
				if (message.hasRepeatedStringPieceField()) {
					java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
					for (int i = 0; i < message.getRepeatedStringPieceField().size(); i++) {
						ProtobufOutputStream.writeString(11, message.getRepeatedStringPieceField().get(i), baos);
					}
					RepeatedStringPieceFieldBuffer = baos.toByteArray();
					totalSize += ProtobufOutputStream.computeRawVarint32Size(11);
					totalSize += ProtobufOutputStream.computeRawVarint32Size(RepeatedStringPieceFieldBuffer.length);
					totalSize += RepeatedStringPieceFieldBuffer.length;
					System.out.println(totalSize);
				}
				byte[] RepeatedCordFieldBuffer = null;
				if (message.hasRepeatedCordField()) {
					java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
					for (int i = 0; i < message.getRepeatedCordField().size(); i++) {
						ProtobufOutputStream.writeString(12, message.getRepeatedCordField().get(i), baos);
					}
					RepeatedCordFieldBuffer = baos.toByteArray();
					totalSize += ProtobufOutputStream.computeRawVarint32Size(12);
					totalSize += ProtobufOutputStream.computeRawVarint32Size(RepeatedCordFieldBuffer.length);
					totalSize += RepeatedCordFieldBuffer.length;
					System.out.println(totalSize);
				}
				final byte[] result = new byte[totalSize];
				int position = 0;
				if (message.hasPrimitiveField()) {
					position = ProtobufOutputStream.writeInt32(1, message.getPrimitiveField(), result, position);
				}
				System.out.println(position);
				if (message.hasStringField()) {
					position = ProtobufOutputStream.writeString(2, StringFieldBuffer, result, position);
					System.out.println(position);
				}
				if (message.hasEnumField()) {
					position = ProtobufOutputStream.writeEnum(3, message.getEnumField().getValue(), result, position);
				}
				System.out.println(position);
				if (message.hasMessageField()) {
					position = ProtobufOutputStream.writeBytes(4, MessageFieldBuffer, result, position);
				}
				System.out.println(position);
				if (message.hasStringPieceField()) {
					position = ProtobufOutputStream.writeString(5, StringPieceFieldBuffer, result, position);
					System.out.println(position);
				}
				if (message.hasCordField()) {
					position = ProtobufOutputStream.writeString(6, CordFieldBuffer, result, position);
					System.out.println(position);
				}
				if (message.hasRepeatedPrimitiveField()) {
					if (message.getRepeatedPrimitiveField().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(7, result, position);
						position = ProtobufOutputStream.writeRawVarint32(RepeatedPrimitiveFieldSize, result, position);
						for (int i = 0; i < message.getRepeatedPrimitiveField().size(); i++) {
							position = ProtobufOutputStream.writeInt32NoTag(message.getRepeatedPrimitiveField().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasRepeatedStringField()) {
					position = ProtobufOutputStream.writeString(8, RepeatedStringFieldBuffer, result, position);
					System.out.println(position);
				}
				if (message.hasRepeatedEnumField()) {
					if (message.getRepeatedEnumField().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(9, result, position);
						position = ProtobufOutputStream.writeRawVarint32(RepeatedEnumFieldSize, result, position);
						for (int i = 0; i < message.getRepeatedEnumField().size(); i++) {
							position = ProtobufOutputStream.writeEnumNoTag(message.getRepeatedEnumField().get(i).getValue(), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasRepeatedMessageField()) {
					if (message.getRepeatedMessageField().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(10, result, position);
						position = ProtobufOutputStream.writeRawVarint32(RepeatedMessageFieldBuffer.length, result, position);
						position = ProtobufOutputStream.writeRawBytes(RepeatedMessageFieldBuffer, result, position);
						System.out.println(position);
					}
				}
				if (message.hasRepeatedStringPieceField()) {
					position = ProtobufOutputStream.writeString(11, RepeatedStringPieceFieldBuffer, result, position);
					System.out.println(position);
				}
				if (message.hasRepeatedCordField()) {
					position = ProtobufOutputStream.writeString(12, RepeatedCordFieldBuffer, result, position);
					System.out.println(position);
				}
				ProtobufOutputStream.checkNoSpaceLeft(result, position);
				return result;
			} catch (IOException e) {
				throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
			}
		}

		private static void assertInitialized(protobuf_memless_unittest.UnittestProto.TestCamelCaseFieldNames message) {
		}
	}

	public interface TestFieldOrderings {
		boolean hasMy_string();

		String getMy_string();

		void setMy_string(String my_string);

		boolean hasMy_int();

		long getMy_int();

		void setMy_int(long my_int);

		boolean hasMy_float();

		float getMy_float();

		void setMy_float(float my_float);
	}

	public static class TestFieldOrderingsSerializer {
		public static byte[] serialize(protobuf_memless_unittest.UnittestProto.TestFieldOrderings message) {
			try {
				assertInitialized(message);
				int totalSize = 0;
				byte[] my_stringBuffer = null;
				if (message.hasMy_string()) {
					my_stringBuffer = message.getMy_string().getBytes("UTF-8");
					totalSize += my_stringBuffer.length;
					totalSize += ProtobufOutputStream.computeRawVarint32Size(11);
					totalSize += ProtobufOutputStream.computeRawVarint32Size(my_stringBuffer.length);
					System.out.println(totalSize);
				}
				if (message.hasMy_int()) {
					totalSize += ProtobufOutputStream.computeInt64Size(1, message.getMy_int());
					System.out.println(totalSize);
				}
				if (message.hasMy_float()) {
					totalSize += ProtobufOutputStream.computeFloatSize(101, message.getMy_float());
					System.out.println(totalSize);
				}
				final byte[] result = new byte[totalSize];
				int position = 0;
				if (message.hasMy_string()) {
					position = ProtobufOutputStream.writeString(11, my_stringBuffer, result, position);
					System.out.println(position);
				}
				if (message.hasMy_int()) {
					position = ProtobufOutputStream.writeInt64(1, message.getMy_int(), result, position);
				}
				System.out.println(position);
				if (message.hasMy_float()) {
					position = ProtobufOutputStream.writeFloat(101, message.getMy_float(), result, position);
				}
				System.out.println(position);
				ProtobufOutputStream.checkNoSpaceLeft(result, position);
				return result;
			} catch (IOException e) {
				throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
			}
		}

		private static void assertInitialized(protobuf_memless_unittest.UnittestProto.TestFieldOrderings message) {
		}
	}

	public interface TestExtremeDefaultValues {
		boolean hasEscaped_bytes();

		byte[] getEscaped_bytes();

		void setEscaped_bytes(byte[] escaped_bytes);

		boolean hasLarge_uint32();

		int getLarge_uint32();

		void setLarge_uint32(int large_uint32);

		boolean hasLarge_uint64();

		long getLarge_uint64();

		void setLarge_uint64(long large_uint64);

		boolean hasSmall_int32();

		int getSmall_int32();

		void setSmall_int32(int small_int32);

		boolean hasSmall_int64();

		long getSmall_int64();

		void setSmall_int64(long small_int64);

		boolean hasUtf8_string();

		String getUtf8_string();

		void setUtf8_string(String utf8_string);

		boolean hasZero_float();

		float getZero_float();

		void setZero_float(float zero_float);

		boolean hasOne_float();

		float getOne_float();

		void setOne_float(float one_float);

		boolean hasSmall_float();

		float getSmall_float();

		void setSmall_float(float small_float);

		boolean hasNegative_one_float();

		float getNegative_one_float();

		void setNegative_one_float(float negative_one_float);

		boolean hasNegative_float();

		float getNegative_float();

		void setNegative_float(float negative_float);

		boolean hasLarge_float();

		float getLarge_float();

		void setLarge_float(float large_float);

		boolean hasSmall_negative_float();

		float getSmall_negative_float();

		void setSmall_negative_float(float small_negative_float);

		boolean hasInf_double();

		double getInf_double();

		void setInf_double(double inf_double);

		boolean hasNeg_inf_double();

		double getNeg_inf_double();

		void setNeg_inf_double(double neg_inf_double);

		boolean hasNan_double();

		double getNan_double();

		void setNan_double(double nan_double);

		boolean hasInf_float();

		float getInf_float();

		void setInf_float(float inf_float);

		boolean hasNeg_inf_float();

		float getNeg_inf_float();

		void setNeg_inf_float(float neg_inf_float);

		boolean hasNan_float();

		float getNan_float();

		void setNan_float(float nan_float);
	}

	public static class TestExtremeDefaultValuesSerializer {
		public static byte[] serialize(protobuf_memless_unittest.UnittestProto.TestExtremeDefaultValues message) {
			try {
				assertInitialized(message);
				int totalSize = 0;
				if (message.hasEscaped_bytes()) {
					totalSize += message.getEscaped_bytes().length;
					totalSize += ProtobufOutputStream.computeRawVarint32Size(1);
					totalSize += ProtobufOutputStream.computeRawVarint32Size(message.getEscaped_bytes().length);
					System.out.println(totalSize);
				}
				if (message.hasLarge_uint32()) {
					totalSize += ProtobufOutputStream.computeUint32Size(2, message.getLarge_uint32());
					System.out.println(totalSize);
				}
				if (message.hasLarge_uint64()) {
					totalSize += ProtobufOutputStream.computeUint64Size(3, message.getLarge_uint64());
					System.out.println(totalSize);
				}
				if (message.hasSmall_int32()) {
					totalSize += ProtobufOutputStream.computeInt32Size(4, message.getSmall_int32());
					System.out.println(totalSize);
				}
				if (message.hasSmall_int64()) {
					totalSize += ProtobufOutputStream.computeInt64Size(5, message.getSmall_int64());
					System.out.println(totalSize);
				}
				byte[] utf8_stringBuffer = null;
				if (message.hasUtf8_string()) {
					utf8_stringBuffer = message.getUtf8_string().getBytes("UTF-8");
					totalSize += utf8_stringBuffer.length;
					totalSize += ProtobufOutputStream.computeRawVarint32Size(6);
					totalSize += ProtobufOutputStream.computeRawVarint32Size(utf8_stringBuffer.length);
					System.out.println(totalSize);
				}
				if (message.hasZero_float()) {
					totalSize += ProtobufOutputStream.computeFloatSize(7, message.getZero_float());
					System.out.println(totalSize);
				}
				if (message.hasOne_float()) {
					totalSize += ProtobufOutputStream.computeFloatSize(8, message.getOne_float());
					System.out.println(totalSize);
				}
				if (message.hasSmall_float()) {
					totalSize += ProtobufOutputStream.computeFloatSize(9, message.getSmall_float());
					System.out.println(totalSize);
				}
				if (message.hasNegative_one_float()) {
					totalSize += ProtobufOutputStream.computeFloatSize(10, message.getNegative_one_float());
					System.out.println(totalSize);
				}
				if (message.hasNegative_float()) {
					totalSize += ProtobufOutputStream.computeFloatSize(11, message.getNegative_float());
					System.out.println(totalSize);
				}
				if (message.hasLarge_float()) {
					totalSize += ProtobufOutputStream.computeFloatSize(12, message.getLarge_float());
					System.out.println(totalSize);
				}
				if (message.hasSmall_negative_float()) {
					totalSize += ProtobufOutputStream.computeFloatSize(13, message.getSmall_negative_float());
					System.out.println(totalSize);
				}
				if (message.hasInf_double()) {
					totalSize += ProtobufOutputStream.computeDoubleSize(14, message.getInf_double());
					System.out.println(totalSize);
				}
				if (message.hasNeg_inf_double()) {
					totalSize += ProtobufOutputStream.computeDoubleSize(15, message.getNeg_inf_double());
					System.out.println(totalSize);
				}
				if (message.hasNan_double()) {
					totalSize += ProtobufOutputStream.computeDoubleSize(16, message.getNan_double());
					System.out.println(totalSize);
				}
				if (message.hasInf_float()) {
					totalSize += ProtobufOutputStream.computeFloatSize(17, message.getInf_float());
					System.out.println(totalSize);
				}
				if (message.hasNeg_inf_float()) {
					totalSize += ProtobufOutputStream.computeFloatSize(18, message.getNeg_inf_float());
					System.out.println(totalSize);
				}
				if (message.hasNan_float()) {
					totalSize += ProtobufOutputStream.computeFloatSize(19, message.getNan_float());
					System.out.println(totalSize);
				}
				final byte[] result = new byte[totalSize];
				int position = 0;
				if (message.hasEscaped_bytes()) {
					position = ProtobufOutputStream.writeBytes(1, message.getEscaped_bytes(), result, position);
				}
				System.out.println(position);
				if (message.hasLarge_uint32()) {
					position = ProtobufOutputStream.writeUint32(2, message.getLarge_uint32(), result, position);
				}
				System.out.println(position);
				if (message.hasLarge_uint64()) {
					position = ProtobufOutputStream.writeUint64(3, message.getLarge_uint64(), result, position);
				}
				System.out.println(position);
				if (message.hasSmall_int32()) {
					position = ProtobufOutputStream.writeInt32(4, message.getSmall_int32(), result, position);
				}
				System.out.println(position);
				if (message.hasSmall_int64()) {
					position = ProtobufOutputStream.writeInt64(5, message.getSmall_int64(), result, position);
				}
				System.out.println(position);
				if (message.hasUtf8_string()) {
					position = ProtobufOutputStream.writeString(6, utf8_stringBuffer, result, position);
					System.out.println(position);
				}
				if (message.hasZero_float()) {
					position = ProtobufOutputStream.writeFloat(7, message.getZero_float(), result, position);
				}
				System.out.println(position);
				if (message.hasOne_float()) {
					position = ProtobufOutputStream.writeFloat(8, message.getOne_float(), result, position);
				}
				System.out.println(position);
				if (message.hasSmall_float()) {
					position = ProtobufOutputStream.writeFloat(9, message.getSmall_float(), result, position);
				}
				System.out.println(position);
				if (message.hasNegative_one_float()) {
					position = ProtobufOutputStream.writeFloat(10, message.getNegative_one_float(), result, position);
				}
				System.out.println(position);
				if (message.hasNegative_float()) {
					position = ProtobufOutputStream.writeFloat(11, message.getNegative_float(), result, position);
				}
				System.out.println(position);
				if (message.hasLarge_float()) {
					position = ProtobufOutputStream.writeFloat(12, message.getLarge_float(), result, position);
				}
				System.out.println(position);
				if (message.hasSmall_negative_float()) {
					position = ProtobufOutputStream.writeFloat(13, message.getSmall_negative_float(), result, position);
				}
				System.out.println(position);
				if (message.hasInf_double()) {
					position = ProtobufOutputStream.writeDouble(14, message.getInf_double(), result, position);
				}
				System.out.println(position);
				if (message.hasNeg_inf_double()) {
					position = ProtobufOutputStream.writeDouble(15, message.getNeg_inf_double(), result, position);
				}
				System.out.println(position);
				if (message.hasNan_double()) {
					position = ProtobufOutputStream.writeDouble(16, message.getNan_double(), result, position);
				}
				System.out.println(position);
				if (message.hasInf_float()) {
					position = ProtobufOutputStream.writeFloat(17, message.getInf_float(), result, position);
				}
				System.out.println(position);
				if (message.hasNeg_inf_float()) {
					position = ProtobufOutputStream.writeFloat(18, message.getNeg_inf_float(), result, position);
				}
				System.out.println(position);
				if (message.hasNan_float()) {
					position = ProtobufOutputStream.writeFloat(19, message.getNan_float(), result, position);
				}
				System.out.println(position);
				ProtobufOutputStream.checkNoSpaceLeft(result, position);
				return result;
			} catch (IOException e) {
				throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
			}
		}

		private static void assertInitialized(protobuf_memless_unittest.UnittestProto.TestExtremeDefaultValues message) {
		}
	}

	public interface OneString {
		boolean hasData();

		String getData();

		void setData(String data);
	}

	public static class OneStringSerializer {
		public static byte[] serialize(protobuf_memless_unittest.UnittestProto.OneString message) {
			try {
				assertInitialized(message);
				int totalSize = 0;
				byte[] dataBuffer = null;
				if (message.hasData()) {
					dataBuffer = message.getData().getBytes("UTF-8");
					totalSize += dataBuffer.length;
					totalSize += ProtobufOutputStream.computeRawVarint32Size(1);
					totalSize += ProtobufOutputStream.computeRawVarint32Size(dataBuffer.length);
					System.out.println(totalSize);
				}
				final byte[] result = new byte[totalSize];
				int position = 0;
				if (message.hasData()) {
					position = ProtobufOutputStream.writeString(1, dataBuffer, result, position);
					System.out.println(position);
				}
				ProtobufOutputStream.checkNoSpaceLeft(result, position);
				return result;
			} catch (IOException e) {
				throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
			}
		}

		private static void assertInitialized(protobuf_memless_unittest.UnittestProto.OneString message) {
		}
	}

	public interface OneBytes {
		boolean hasData();

		byte[] getData();

		void setData(byte[] data);
	}

	public static class OneBytesSerializer {
		public static byte[] serialize(protobuf_memless_unittest.UnittestProto.OneBytes message) {
			try {
				assertInitialized(message);
				int totalSize = 0;
				if (message.hasData()) {
					totalSize += message.getData().length;
					totalSize += ProtobufOutputStream.computeRawVarint32Size(1);
					totalSize += ProtobufOutputStream.computeRawVarint32Size(message.getData().length);
					System.out.println(totalSize);
				}
				final byte[] result = new byte[totalSize];
				int position = 0;
				if (message.hasData()) {
					position = ProtobufOutputStream.writeBytes(1, message.getData(), result, position);
				}
				System.out.println(position);
				ProtobufOutputStream.checkNoSpaceLeft(result, position);
				return result;
			} catch (IOException e) {
				throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
			}
		}

		private static void assertInitialized(protobuf_memless_unittest.UnittestProto.OneBytes message) {
		}
	}

	public interface TestPackedTypes {
		boolean hasPacked_int32();

		java.util.List<Integer> getPacked_int32();

		void setPacked_int32(java.util.List<Integer> packed_int32);

		boolean hasPacked_int64();

		java.util.List<Long> getPacked_int64();

		void setPacked_int64(java.util.List<Long> packed_int64);

		boolean hasPacked_uint32();

		java.util.List<Integer> getPacked_uint32();

		void setPacked_uint32(java.util.List<Integer> packed_uint32);

		boolean hasPacked_uint64();

		java.util.List<Long> getPacked_uint64();

		void setPacked_uint64(java.util.List<Long> packed_uint64);

		boolean hasPacked_sint32();

		java.util.List<Integer> getPacked_sint32();

		void setPacked_sint32(java.util.List<Integer> packed_sint32);

		boolean hasPacked_sint64();

		java.util.List<Long> getPacked_sint64();

		void setPacked_sint64(java.util.List<Long> packed_sint64);

		boolean hasPacked_fixed32();

		java.util.List<Integer> getPacked_fixed32();

		void setPacked_fixed32(java.util.List<Integer> packed_fixed32);

		boolean hasPacked_fixed64();

		java.util.List<Long> getPacked_fixed64();

		void setPacked_fixed64(java.util.List<Long> packed_fixed64);

		boolean hasPacked_sfixed32();

		java.util.List<Integer> getPacked_sfixed32();

		void setPacked_sfixed32(java.util.List<Integer> packed_sfixed32);

		boolean hasPacked_sfixed64();

		java.util.List<Long> getPacked_sfixed64();

		void setPacked_sfixed64(java.util.List<Long> packed_sfixed64);

		boolean hasPacked_float();

		java.util.List<Float> getPacked_float();

		void setPacked_float(java.util.List<Float> packed_float);

		boolean hasPacked_double();

		java.util.List<Double> getPacked_double();

		void setPacked_double(java.util.List<Double> packed_double);

		boolean hasPacked_bool();

		java.util.List<Boolean> getPacked_bool();

		void setPacked_bool(java.util.List<Boolean> packed_bool);

		boolean hasPacked_enum();

		java.util.List<protobuf_memless_unittest.UnittestProto.ForeignEnum> getPacked_enum();

		void setPacked_enum(java.util.List<protobuf_memless_unittest.UnittestProto.ForeignEnum> packed_enum);
	}

	public static class TestPackedTypesSerializer {
		public static byte[] serialize(protobuf_memless_unittest.UnittestProto.TestPackedTypes message) {
			try {
				assertInitialized(message);
				int totalSize = 0;
				int packed_int32Size = 0;
				if (message.hasPacked_int32()) {
					for (int i = 0; i < message.getPacked_int32().size(); i++) {
						packed_int32Size += ProtobufOutputStream.computeInt32Size(90, message.getPacked_int32().get(i));
					}
					totalSize += packed_int32Size;
				}
				System.out.println(totalSize);
				int packed_int64Size = 0;
				if (message.hasPacked_int64()) {
					for (int i = 0; i < message.getPacked_int64().size(); i++) {
						packed_int64Size += ProtobufOutputStream.computeInt64Size(91, message.getPacked_int64().get(i));
					}
					totalSize += packed_int64Size;
				}
				System.out.println(totalSize);
				int packed_uint32Size = 0;
				if (message.hasPacked_uint32()) {
					for (int i = 0; i < message.getPacked_uint32().size(); i++) {
						packed_uint32Size += ProtobufOutputStream.computeUint32Size(92, message.getPacked_uint32().get(i));
					}
					totalSize += packed_uint32Size;
				}
				System.out.println(totalSize);
				int packed_uint64Size = 0;
				if (message.hasPacked_uint64()) {
					for (int i = 0; i < message.getPacked_uint64().size(); i++) {
						packed_uint64Size += ProtobufOutputStream.computeUint64Size(93, message.getPacked_uint64().get(i));
					}
					totalSize += packed_uint64Size;
				}
				System.out.println(totalSize);
				int packed_sint32Size = 0;
				if (message.hasPacked_sint32()) {
					for (int i = 0; i < message.getPacked_sint32().size(); i++) {
						packed_sint32Size += ProtobufOutputStream.computeSint32Size(94, message.getPacked_sint32().get(i));
					}
					totalSize += packed_sint32Size;
				}
				System.out.println(totalSize);
				int packed_sint64Size = 0;
				if (message.hasPacked_sint64()) {
					for (int i = 0; i < message.getPacked_sint64().size(); i++) {
						packed_sint64Size += ProtobufOutputStream.computeSint64Size(95, message.getPacked_sint64().get(i));
					}
					totalSize += packed_sint64Size;
				}
				System.out.println(totalSize);
				int packed_fixed32Size = 0;
				if (message.hasPacked_fixed32()) {
					for (int i = 0; i < message.getPacked_fixed32().size(); i++) {
						packed_fixed32Size += ProtobufOutputStream.computeFixed32Size(96, message.getPacked_fixed32().get(i));
					}
					totalSize += packed_fixed32Size;
				}
				System.out.println(totalSize);
				int packed_fixed64Size = 0;
				if (message.hasPacked_fixed64()) {
					for (int i = 0; i < message.getPacked_fixed64().size(); i++) {
						packed_fixed64Size += ProtobufOutputStream.computeFixed64Size(97, message.getPacked_fixed64().get(i));
					}
					totalSize += packed_fixed64Size;
				}
				System.out.println(totalSize);
				int packed_sfixed32Size = 0;
				if (message.hasPacked_sfixed32()) {
					for (int i = 0; i < message.getPacked_sfixed32().size(); i++) {
						packed_sfixed32Size += ProtobufOutputStream.computeSfixed32Size(98, message.getPacked_sfixed32().get(i));
					}
					totalSize += packed_sfixed32Size;
				}
				System.out.println(totalSize);
				int packed_sfixed64Size = 0;
				if (message.hasPacked_sfixed64()) {
					for (int i = 0; i < message.getPacked_sfixed64().size(); i++) {
						packed_sfixed64Size += ProtobufOutputStream.computeSfixed64Size(99, message.getPacked_sfixed64().get(i));
					}
					totalSize += packed_sfixed64Size;
				}
				System.out.println(totalSize);
				int packed_floatSize = 0;
				if (message.hasPacked_float()) {
					for (int i = 0; i < message.getPacked_float().size(); i++) {
						packed_floatSize += ProtobufOutputStream.computeFloatSize(100, message.getPacked_float().get(i));
					}
					totalSize += packed_floatSize;
				}
				System.out.println(totalSize);
				int packed_doubleSize = 0;
				if (message.hasPacked_double()) {
					for (int i = 0; i < message.getPacked_double().size(); i++) {
						packed_doubleSize += ProtobufOutputStream.computeDoubleSize(101, message.getPacked_double().get(i));
					}
					totalSize += packed_doubleSize;
				}
				System.out.println(totalSize);
				int packed_boolSize = 0;
				if (message.hasPacked_bool()) {
					for (int i = 0; i < message.getPacked_bool().size(); i++) {
						packed_boolSize += ProtobufOutputStream.computeBoolSize(102, message.getPacked_bool().get(i));
					}
					totalSize += packed_boolSize;
				}
				System.out.println(totalSize);
				int packed_enumSize = 0;
				if (message.hasPacked_enum()) {
					for (int i = 0; i < message.getPacked_enum().size(); i++) {
						packed_enumSize += ProtobufOutputStream.computeEnumSize(103, message.getPacked_enum().get(i).getValue());
					}
					totalSize += packed_enumSize;
				}
				System.out.println(totalSize);
				final byte[] result = new byte[totalSize];
				int position = 0;
				if (message.hasPacked_int32()) {
					if (message.getPacked_int32().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(90, result, position);
						position = ProtobufOutputStream.writeRawVarint32(packed_int32Size, result, position);
						for (int i = 0; i < message.getPacked_int32().size(); i++) {
							position = ProtobufOutputStream.writeInt32NoTag(message.getPacked_int32().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasPacked_int64()) {
					if (message.getPacked_int64().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(91, result, position);
						position = ProtobufOutputStream.writeRawVarint32(packed_int64Size, result, position);
						for (int i = 0; i < message.getPacked_int64().size(); i++) {
							position = ProtobufOutputStream.writeInt64NoTag(message.getPacked_int64().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasPacked_uint32()) {
					if (message.getPacked_uint32().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(92, result, position);
						position = ProtobufOutputStream.writeRawVarint32(packed_uint32Size, result, position);
						for (int i = 0; i < message.getPacked_uint32().size(); i++) {
							position = ProtobufOutputStream.writeUint32NoTag(message.getPacked_uint32().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasPacked_uint64()) {
					if (message.getPacked_uint64().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(93, result, position);
						position = ProtobufOutputStream.writeRawVarint32(packed_uint64Size, result, position);
						for (int i = 0; i < message.getPacked_uint64().size(); i++) {
							position = ProtobufOutputStream.writeUint64NoTag(message.getPacked_uint64().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasPacked_sint32()) {
					if (message.getPacked_sint32().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(94, result, position);
						position = ProtobufOutputStream.writeRawVarint32(packed_sint32Size, result, position);
						for (int i = 0; i < message.getPacked_sint32().size(); i++) {
							position = ProtobufOutputStream.writeSint32NoTag(message.getPacked_sint32().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasPacked_sint64()) {
					if (message.getPacked_sint64().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(95, result, position);
						position = ProtobufOutputStream.writeRawVarint32(packed_sint64Size, result, position);
						for (int i = 0; i < message.getPacked_sint64().size(); i++) {
							position = ProtobufOutputStream.writeSint64NoTag(message.getPacked_sint64().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasPacked_fixed32()) {
					if (message.getPacked_fixed32().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(96, result, position);
						position = ProtobufOutputStream.writeRawVarint32(packed_fixed32Size, result, position);
						for (int i = 0; i < message.getPacked_fixed32().size(); i++) {
							position = ProtobufOutputStream.writeFixed32NoTag(message.getPacked_fixed32().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasPacked_fixed64()) {
					if (message.getPacked_fixed64().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(97, result, position);
						position = ProtobufOutputStream.writeRawVarint32(packed_fixed64Size, result, position);
						for (int i = 0; i < message.getPacked_fixed64().size(); i++) {
							position = ProtobufOutputStream.writeFixed64NoTag(message.getPacked_fixed64().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasPacked_sfixed32()) {
					if (message.getPacked_sfixed32().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(98, result, position);
						position = ProtobufOutputStream.writeRawVarint32(packed_sfixed32Size, result, position);
						for (int i = 0; i < message.getPacked_sfixed32().size(); i++) {
							position = ProtobufOutputStream.writeSfixed32NoTag(message.getPacked_sfixed32().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasPacked_sfixed64()) {
					if (message.getPacked_sfixed64().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(99, result, position);
						position = ProtobufOutputStream.writeRawVarint32(packed_sfixed64Size, result, position);
						for (int i = 0; i < message.getPacked_sfixed64().size(); i++) {
							position = ProtobufOutputStream.writeSfixed64NoTag(message.getPacked_sfixed64().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasPacked_float()) {
					if (message.getPacked_float().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(100, result, position);
						position = ProtobufOutputStream.writeRawVarint32(packed_floatSize, result, position);
						for (int i = 0; i < message.getPacked_float().size(); i++) {
							position = ProtobufOutputStream.writeFloatNoTag(message.getPacked_float().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasPacked_double()) {
					if (message.getPacked_double().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(101, result, position);
						position = ProtobufOutputStream.writeRawVarint32(packed_doubleSize, result, position);
						for (int i = 0; i < message.getPacked_double().size(); i++) {
							position = ProtobufOutputStream.writeDoubleNoTag(message.getPacked_double().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasPacked_bool()) {
					if (message.getPacked_bool().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(102, result, position);
						position = ProtobufOutputStream.writeRawVarint32(packed_boolSize, result, position);
						for (int i = 0; i < message.getPacked_bool().size(); i++) {
							position = ProtobufOutputStream.writeBoolNoTag(message.getPacked_bool().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasPacked_enum()) {
					if (message.getPacked_enum().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(103, result, position);
						position = ProtobufOutputStream.writeRawVarint32(packed_enumSize, result, position);
						for (int i = 0; i < message.getPacked_enum().size(); i++) {
							position = ProtobufOutputStream.writeEnumNoTag(message.getPacked_enum().get(i).getValue(), result, position);
						}
						System.out.println(position);
					}
				}
				ProtobufOutputStream.checkNoSpaceLeft(result, position);
				return result;
			} catch (IOException e) {
				throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
			}
		}

		private static void assertInitialized(protobuf_memless_unittest.UnittestProto.TestPackedTypes message) {
		}
	}

	public interface TestUnpackedTypes {
		boolean hasUnpacked_int32();

		java.util.List<Integer> getUnpacked_int32();

		void setUnpacked_int32(java.util.List<Integer> unpacked_int32);

		boolean hasUnpacked_int64();

		java.util.List<Long> getUnpacked_int64();

		void setUnpacked_int64(java.util.List<Long> unpacked_int64);

		boolean hasUnpacked_uint32();

		java.util.List<Integer> getUnpacked_uint32();

		void setUnpacked_uint32(java.util.List<Integer> unpacked_uint32);

		boolean hasUnpacked_uint64();

		java.util.List<Long> getUnpacked_uint64();

		void setUnpacked_uint64(java.util.List<Long> unpacked_uint64);

		boolean hasUnpacked_sint32();

		java.util.List<Integer> getUnpacked_sint32();

		void setUnpacked_sint32(java.util.List<Integer> unpacked_sint32);

		boolean hasUnpacked_sint64();

		java.util.List<Long> getUnpacked_sint64();

		void setUnpacked_sint64(java.util.List<Long> unpacked_sint64);

		boolean hasUnpacked_fixed32();

		java.util.List<Integer> getUnpacked_fixed32();

		void setUnpacked_fixed32(java.util.List<Integer> unpacked_fixed32);

		boolean hasUnpacked_fixed64();

		java.util.List<Long> getUnpacked_fixed64();

		void setUnpacked_fixed64(java.util.List<Long> unpacked_fixed64);

		boolean hasUnpacked_sfixed32();

		java.util.List<Integer> getUnpacked_sfixed32();

		void setUnpacked_sfixed32(java.util.List<Integer> unpacked_sfixed32);

		boolean hasUnpacked_sfixed64();

		java.util.List<Long> getUnpacked_sfixed64();

		void setUnpacked_sfixed64(java.util.List<Long> unpacked_sfixed64);

		boolean hasUnpacked_float();

		java.util.List<Float> getUnpacked_float();

		void setUnpacked_float(java.util.List<Float> unpacked_float);

		boolean hasUnpacked_double();

		java.util.List<Double> getUnpacked_double();

		void setUnpacked_double(java.util.List<Double> unpacked_double);

		boolean hasUnpacked_bool();

		java.util.List<Boolean> getUnpacked_bool();

		void setUnpacked_bool(java.util.List<Boolean> unpacked_bool);

		boolean hasUnpacked_enum();

		java.util.List<protobuf_memless_unittest.UnittestProto.ForeignEnum> getUnpacked_enum();

		void setUnpacked_enum(java.util.List<protobuf_memless_unittest.UnittestProto.ForeignEnum> unpacked_enum);
	}

	public static class TestUnpackedTypesSerializer {
		public static byte[] serialize(protobuf_memless_unittest.UnittestProto.TestUnpackedTypes message) {
			try {
				assertInitialized(message);
				int totalSize = 0;
				int unpacked_int32Size = 0;
				if (message.hasUnpacked_int32()) {
					for (int i = 0; i < message.getUnpacked_int32().size(); i++) {
						unpacked_int32Size += ProtobufOutputStream.computeInt32Size(90, message.getUnpacked_int32().get(i));
					}
					totalSize += unpacked_int32Size;
				}
				System.out.println(totalSize);
				int unpacked_int64Size = 0;
				if (message.hasUnpacked_int64()) {
					for (int i = 0; i < message.getUnpacked_int64().size(); i++) {
						unpacked_int64Size += ProtobufOutputStream.computeInt64Size(91, message.getUnpacked_int64().get(i));
					}
					totalSize += unpacked_int64Size;
				}
				System.out.println(totalSize);
				int unpacked_uint32Size = 0;
				if (message.hasUnpacked_uint32()) {
					for (int i = 0; i < message.getUnpacked_uint32().size(); i++) {
						unpacked_uint32Size += ProtobufOutputStream.computeUint32Size(92, message.getUnpacked_uint32().get(i));
					}
					totalSize += unpacked_uint32Size;
				}
				System.out.println(totalSize);
				int unpacked_uint64Size = 0;
				if (message.hasUnpacked_uint64()) {
					for (int i = 0; i < message.getUnpacked_uint64().size(); i++) {
						unpacked_uint64Size += ProtobufOutputStream.computeUint64Size(93, message.getUnpacked_uint64().get(i));
					}
					totalSize += unpacked_uint64Size;
				}
				System.out.println(totalSize);
				int unpacked_sint32Size = 0;
				if (message.hasUnpacked_sint32()) {
					for (int i = 0; i < message.getUnpacked_sint32().size(); i++) {
						unpacked_sint32Size += ProtobufOutputStream.computeSint32Size(94, message.getUnpacked_sint32().get(i));
					}
					totalSize += unpacked_sint32Size;
				}
				System.out.println(totalSize);
				int unpacked_sint64Size = 0;
				if (message.hasUnpacked_sint64()) {
					for (int i = 0; i < message.getUnpacked_sint64().size(); i++) {
						unpacked_sint64Size += ProtobufOutputStream.computeSint64Size(95, message.getUnpacked_sint64().get(i));
					}
					totalSize += unpacked_sint64Size;
				}
				System.out.println(totalSize);
				int unpacked_fixed32Size = 0;
				if (message.hasUnpacked_fixed32()) {
					for (int i = 0; i < message.getUnpacked_fixed32().size(); i++) {
						unpacked_fixed32Size += ProtobufOutputStream.computeFixed32Size(96, message.getUnpacked_fixed32().get(i));
					}
					totalSize += unpacked_fixed32Size;
				}
				System.out.println(totalSize);
				int unpacked_fixed64Size = 0;
				if (message.hasUnpacked_fixed64()) {
					for (int i = 0; i < message.getUnpacked_fixed64().size(); i++) {
						unpacked_fixed64Size += ProtobufOutputStream.computeFixed64Size(97, message.getUnpacked_fixed64().get(i));
					}
					totalSize += unpacked_fixed64Size;
				}
				System.out.println(totalSize);
				int unpacked_sfixed32Size = 0;
				if (message.hasUnpacked_sfixed32()) {
					for (int i = 0; i < message.getUnpacked_sfixed32().size(); i++) {
						unpacked_sfixed32Size += ProtobufOutputStream.computeSfixed32Size(98, message.getUnpacked_sfixed32().get(i));
					}
					totalSize += unpacked_sfixed32Size;
				}
				System.out.println(totalSize);
				int unpacked_sfixed64Size = 0;
				if (message.hasUnpacked_sfixed64()) {
					for (int i = 0; i < message.getUnpacked_sfixed64().size(); i++) {
						unpacked_sfixed64Size += ProtobufOutputStream.computeSfixed64Size(99, message.getUnpacked_sfixed64().get(i));
					}
					totalSize += unpacked_sfixed64Size;
				}
				System.out.println(totalSize);
				int unpacked_floatSize = 0;
				if (message.hasUnpacked_float()) {
					for (int i = 0; i < message.getUnpacked_float().size(); i++) {
						unpacked_floatSize += ProtobufOutputStream.computeFloatSize(100, message.getUnpacked_float().get(i));
					}
					totalSize += unpacked_floatSize;
				}
				System.out.println(totalSize);
				int unpacked_doubleSize = 0;
				if (message.hasUnpacked_double()) {
					for (int i = 0; i < message.getUnpacked_double().size(); i++) {
						unpacked_doubleSize += ProtobufOutputStream.computeDoubleSize(101, message.getUnpacked_double().get(i));
					}
					totalSize += unpacked_doubleSize;
				}
				System.out.println(totalSize);
				int unpacked_boolSize = 0;
				if (message.hasUnpacked_bool()) {
					for (int i = 0; i < message.getUnpacked_bool().size(); i++) {
						unpacked_boolSize += ProtobufOutputStream.computeBoolSize(102, message.getUnpacked_bool().get(i));
					}
					totalSize += unpacked_boolSize;
				}
				System.out.println(totalSize);
				int unpacked_enumSize = 0;
				if (message.hasUnpacked_enum()) {
					for (int i = 0; i < message.getUnpacked_enum().size(); i++) {
						unpacked_enumSize += ProtobufOutputStream.computeEnumSize(103, message.getUnpacked_enum().get(i).getValue());
					}
					totalSize += unpacked_enumSize;
				}
				System.out.println(totalSize);
				final byte[] result = new byte[totalSize];
				int position = 0;
				if (message.hasUnpacked_int32()) {
					if (message.getUnpacked_int32().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(90, result, position);
						position = ProtobufOutputStream.writeRawVarint32(unpacked_int32Size, result, position);
						for (int i = 0; i < message.getUnpacked_int32().size(); i++) {
							position = ProtobufOutputStream.writeInt32NoTag(message.getUnpacked_int32().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasUnpacked_int64()) {
					if (message.getUnpacked_int64().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(91, result, position);
						position = ProtobufOutputStream.writeRawVarint32(unpacked_int64Size, result, position);
						for (int i = 0; i < message.getUnpacked_int64().size(); i++) {
							position = ProtobufOutputStream.writeInt64NoTag(message.getUnpacked_int64().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasUnpacked_uint32()) {
					if (message.getUnpacked_uint32().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(92, result, position);
						position = ProtobufOutputStream.writeRawVarint32(unpacked_uint32Size, result, position);
						for (int i = 0; i < message.getUnpacked_uint32().size(); i++) {
							position = ProtobufOutputStream.writeUint32NoTag(message.getUnpacked_uint32().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasUnpacked_uint64()) {
					if (message.getUnpacked_uint64().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(93, result, position);
						position = ProtobufOutputStream.writeRawVarint32(unpacked_uint64Size, result, position);
						for (int i = 0; i < message.getUnpacked_uint64().size(); i++) {
							position = ProtobufOutputStream.writeUint64NoTag(message.getUnpacked_uint64().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasUnpacked_sint32()) {
					if (message.getUnpacked_sint32().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(94, result, position);
						position = ProtobufOutputStream.writeRawVarint32(unpacked_sint32Size, result, position);
						for (int i = 0; i < message.getUnpacked_sint32().size(); i++) {
							position = ProtobufOutputStream.writeSint32NoTag(message.getUnpacked_sint32().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasUnpacked_sint64()) {
					if (message.getUnpacked_sint64().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(95, result, position);
						position = ProtobufOutputStream.writeRawVarint32(unpacked_sint64Size, result, position);
						for (int i = 0; i < message.getUnpacked_sint64().size(); i++) {
							position = ProtobufOutputStream.writeSint64NoTag(message.getUnpacked_sint64().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasUnpacked_fixed32()) {
					if (message.getUnpacked_fixed32().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(96, result, position);
						position = ProtobufOutputStream.writeRawVarint32(unpacked_fixed32Size, result, position);
						for (int i = 0; i < message.getUnpacked_fixed32().size(); i++) {
							position = ProtobufOutputStream.writeFixed32NoTag(message.getUnpacked_fixed32().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasUnpacked_fixed64()) {
					if (message.getUnpacked_fixed64().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(97, result, position);
						position = ProtobufOutputStream.writeRawVarint32(unpacked_fixed64Size, result, position);
						for (int i = 0; i < message.getUnpacked_fixed64().size(); i++) {
							position = ProtobufOutputStream.writeFixed64NoTag(message.getUnpacked_fixed64().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasUnpacked_sfixed32()) {
					if (message.getUnpacked_sfixed32().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(98, result, position);
						position = ProtobufOutputStream.writeRawVarint32(unpacked_sfixed32Size, result, position);
						for (int i = 0; i < message.getUnpacked_sfixed32().size(); i++) {
							position = ProtobufOutputStream.writeSfixed32NoTag(message.getUnpacked_sfixed32().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasUnpacked_sfixed64()) {
					if (message.getUnpacked_sfixed64().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(99, result, position);
						position = ProtobufOutputStream.writeRawVarint32(unpacked_sfixed64Size, result, position);
						for (int i = 0; i < message.getUnpacked_sfixed64().size(); i++) {
							position = ProtobufOutputStream.writeSfixed64NoTag(message.getUnpacked_sfixed64().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasUnpacked_float()) {
					if (message.getUnpacked_float().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(100, result, position);
						position = ProtobufOutputStream.writeRawVarint32(unpacked_floatSize, result, position);
						for (int i = 0; i < message.getUnpacked_float().size(); i++) {
							position = ProtobufOutputStream.writeFloatNoTag(message.getUnpacked_float().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasUnpacked_double()) {
					if (message.getUnpacked_double().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(101, result, position);
						position = ProtobufOutputStream.writeRawVarint32(unpacked_doubleSize, result, position);
						for (int i = 0; i < message.getUnpacked_double().size(); i++) {
							position = ProtobufOutputStream.writeDoubleNoTag(message.getUnpacked_double().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasUnpacked_bool()) {
					if (message.getUnpacked_bool().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(102, result, position);
						position = ProtobufOutputStream.writeRawVarint32(unpacked_boolSize, result, position);
						for (int i = 0; i < message.getUnpacked_bool().size(); i++) {
							position = ProtobufOutputStream.writeBoolNoTag(message.getUnpacked_bool().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasUnpacked_enum()) {
					if (message.getUnpacked_enum().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(103, result, position);
						position = ProtobufOutputStream.writeRawVarint32(unpacked_enumSize, result, position);
						for (int i = 0; i < message.getUnpacked_enum().size(); i++) {
							position = ProtobufOutputStream.writeEnumNoTag(message.getUnpacked_enum().get(i).getValue(), result, position);
						}
						System.out.println(position);
					}
				}
				ProtobufOutputStream.checkNoSpaceLeft(result, position);
				return result;
			} catch (IOException e) {
				throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
			}
		}

		private static void assertInitialized(protobuf_memless_unittest.UnittestProto.TestUnpackedTypes message) {
		}
	}

	public interface TestPackedExtensions {
	}

	public static class TestPackedExtensionsSerializer {
		public static byte[] serialize(protobuf_memless_unittest.UnittestProto.TestPackedExtensions message) {
			return new byte[0];
		}
	}

	public interface TestDynamicExtensions {
		boolean hasScalar_extension();

		int getScalar_extension();

		void setScalar_extension(int scalar_extension);

		boolean hasEnum_extension();

		protobuf_memless_unittest.UnittestProto.ForeignEnum getEnum_extension();

		void setEnum_extension(protobuf_memless_unittest.UnittestProto.ForeignEnum enum_extension);

		boolean hasDynamic_enum_extension();

		protobuf_memless_unittest.UnittestProto.TestDynamicExtensions.DynamicEnumType getDynamic_enum_extension();

		void setDynamic_enum_extension(protobuf_memless_unittest.UnittestProto.TestDynamicExtensions.DynamicEnumType dynamic_enum_extension);

		boolean hasMessage_extension();

		protobuf_memless_unittest.UnittestProto.ForeignMessage getMessage_extension();

		void setMessage_extension(protobuf_memless_unittest.UnittestProto.ForeignMessage message_extension);

		boolean hasDynamic_message_extension();

		protobuf_memless_unittest.UnittestProto.TestDynamicExtensions.DynamicMessageType getDynamic_message_extension();

		void setDynamic_message_extension(protobuf_memless_unittest.UnittestProto.TestDynamicExtensions.DynamicMessageType dynamic_message_extension);

		boolean hasRepeated_extension();

		java.util.List<String> getRepeated_extension();

		void setRepeated_extension(java.util.List<String> repeated_extension);

		boolean hasPacked_extension();

		java.util.List<Integer> getPacked_extension();

		void setPacked_extension(java.util.List<Integer> packed_extension);

		public interface DynamicMessageType {
			boolean hasDynamic_field();

			int getDynamic_field();

			void setDynamic_field(int dynamic_field);
		}

		public static class DynamicMessageTypeSerializer {
			public static byte[] serialize(protobuf_memless_unittest.UnittestProto.TestDynamicExtensions.DynamicMessageType message) {
				try {
					assertInitialized(message);
					int totalSize = 0;
					if (message.hasDynamic_field()) {
						totalSize += ProtobufOutputStream.computeInt32Size(2100, message.getDynamic_field());
						System.out.println(totalSize);
					}
					final byte[] result = new byte[totalSize];
					int position = 0;
					if (message.hasDynamic_field()) {
						position = ProtobufOutputStream.writeInt32(2100, message.getDynamic_field(), result, position);
					}
					System.out.println(position);
					ProtobufOutputStream.checkNoSpaceLeft(result, position);
					return result;
				} catch (IOException e) {
					throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
				}
			}

			private static void assertInitialized(protobuf_memless_unittest.UnittestProto.TestDynamicExtensions.DynamicMessageType message) {
			}
		}

		public enum DynamicEnumType {
			DYNAMIC_FOO(2200), DYNAMIC_BAR(2201), DYNAMIC_BAZ(2202), ;
			public static DynamicEnumType valueOf(int value) {
				switch (value) {
				case 2200:
					return DYNAMIC_FOO;
				case 2201:
					return DYNAMIC_BAR;
				case 2202:
					return DYNAMIC_BAZ;
				default:
					return null;
				}
			}

			private DynamicEnumType(int value) {
				this.value = value;
			}

			private int value;

			public int getValue() {
				return value;
			}
		}

	}

	public static class TestDynamicExtensionsSerializer {
		public static byte[] serialize(protobuf_memless_unittest.UnittestProto.TestDynamicExtensions message) {
			try {
				assertInitialized(message);
				int totalSize = 0;
				if (message.hasScalar_extension()) {
					totalSize += ProtobufOutputStream.computeFixed32Size(2000, message.getScalar_extension());
					System.out.println(totalSize);
				}
				if (message.hasEnum_extension()) {
					totalSize += ProtobufOutputStream.computeEnumSize(2001, message.getEnum_extension().getValue());
					System.out.println(totalSize);
				}
				if (message.hasDynamic_enum_extension()) {
					totalSize += ProtobufOutputStream.computeEnumSize(2002, message.getDynamic_enum_extension().getValue());
					System.out.println(totalSize);
				}
				byte[] message_extensionBuffer = null;
				if (message.hasMessage_extension()) {
					message_extensionBuffer = protobuf_memless_unittest.UnittestProto.ForeignMessageSerializer.serialize(message.getMessage_extension());
					totalSize += message_extensionBuffer.length;
					System.out.println(totalSize);
				}
				byte[] dynamic_message_extensionBuffer = null;
				if (message.hasDynamic_message_extension()) {
					dynamic_message_extensionBuffer = protobuf_memless_unittest.UnittestProto.TestDynamicExtensions.DynamicMessageTypeSerializer.serialize(message.getDynamic_message_extension());
					totalSize += dynamic_message_extensionBuffer.length;
					System.out.println(totalSize);
				}
				byte[] repeated_extensionBuffer = null;
				if (message.hasRepeated_extension()) {
					java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
					for (int i = 0; i < message.getRepeated_extension().size(); i++) {
						ProtobufOutputStream.writeString(2005, message.getRepeated_extension().get(i), baos);
					}
					repeated_extensionBuffer = baos.toByteArray();
					totalSize += ProtobufOutputStream.computeRawVarint32Size(2005);
					totalSize += ProtobufOutputStream.computeRawVarint32Size(repeated_extensionBuffer.length);
					totalSize += repeated_extensionBuffer.length;
					System.out.println(totalSize);
				}
				int packed_extensionSize = 0;
				if (message.hasPacked_extension()) {
					for (int i = 0; i < message.getPacked_extension().size(); i++) {
						packed_extensionSize += ProtobufOutputStream.computeSint32Size(2006, message.getPacked_extension().get(i));
					}
					totalSize += packed_extensionSize;
				}
				System.out.println(totalSize);
				final byte[] result = new byte[totalSize];
				int position = 0;
				if (message.hasScalar_extension()) {
					position = ProtobufOutputStream.writeFixed32(2000, message.getScalar_extension(), result, position);
				}
				System.out.println(position);
				if (message.hasEnum_extension()) {
					position = ProtobufOutputStream.writeEnum(2001, message.getEnum_extension().getValue(), result, position);
				}
				System.out.println(position);
				if (message.hasDynamic_enum_extension()) {
					position = ProtobufOutputStream.writeEnum(2002, message.getDynamic_enum_extension().getValue(), result, position);
				}
				System.out.println(position);
				if (message.hasMessage_extension()) {
					position = ProtobufOutputStream.writeBytes(2003, message_extensionBuffer, result, position);
				}
				System.out.println(position);
				if (message.hasDynamic_message_extension()) {
					position = ProtobufOutputStream.writeBytes(2004, dynamic_message_extensionBuffer, result, position);
				}
				System.out.println(position);
				if (message.hasRepeated_extension()) {
					position = ProtobufOutputStream.writeString(2005, repeated_extensionBuffer, result, position);
					System.out.println(position);
				}
				if (message.hasPacked_extension()) {
					if (message.getPacked_extension().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(2006, result, position);
						position = ProtobufOutputStream.writeRawVarint32(packed_extensionSize, result, position);
						for (int i = 0; i < message.getPacked_extension().size(); i++) {
							position = ProtobufOutputStream.writeSint32NoTag(message.getPacked_extension().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				ProtobufOutputStream.checkNoSpaceLeft(result, position);
				return result;
			} catch (IOException e) {
				throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
			}
		}

		private static void assertInitialized(protobuf_memless_unittest.UnittestProto.TestDynamicExtensions message) {
		}
	}

	public interface TestRepeatedScalarDifferentTagSizes {
		boolean hasRepeated_fixed32();

		java.util.List<Integer> getRepeated_fixed32();

		void setRepeated_fixed32(java.util.List<Integer> repeated_fixed32);

		boolean hasRepeated_int32();

		java.util.List<Integer> getRepeated_int32();

		void setRepeated_int32(java.util.List<Integer> repeated_int32);

		boolean hasRepeated_fixed64();

		java.util.List<Long> getRepeated_fixed64();

		void setRepeated_fixed64(java.util.List<Long> repeated_fixed64);

		boolean hasRepeated_int64();

		java.util.List<Long> getRepeated_int64();

		void setRepeated_int64(java.util.List<Long> repeated_int64);

		boolean hasRepeated_float();

		java.util.List<Float> getRepeated_float();

		void setRepeated_float(java.util.List<Float> repeated_float);

		boolean hasRepeated_uint64();

		java.util.List<Long> getRepeated_uint64();

		void setRepeated_uint64(java.util.List<Long> repeated_uint64);
	}

	public static class TestRepeatedScalarDifferentTagSizesSerializer {
		public static byte[] serialize(protobuf_memless_unittest.UnittestProto.TestRepeatedScalarDifferentTagSizes message) {
			try {
				assertInitialized(message);
				int totalSize = 0;
				int repeated_fixed32Size = 0;
				if (message.hasRepeated_fixed32()) {
					for (int i = 0; i < message.getRepeated_fixed32().size(); i++) {
						repeated_fixed32Size += ProtobufOutputStream.computeFixed32Size(12, message.getRepeated_fixed32().get(i));
					}
					totalSize += repeated_fixed32Size;
				}
				System.out.println(totalSize);
				int repeated_int32Size = 0;
				if (message.hasRepeated_int32()) {
					for (int i = 0; i < message.getRepeated_int32().size(); i++) {
						repeated_int32Size += ProtobufOutputStream.computeInt32Size(13, message.getRepeated_int32().get(i));
					}
					totalSize += repeated_int32Size;
				}
				System.out.println(totalSize);
				int repeated_fixed64Size = 0;
				if (message.hasRepeated_fixed64()) {
					for (int i = 0; i < message.getRepeated_fixed64().size(); i++) {
						repeated_fixed64Size += ProtobufOutputStream.computeFixed64Size(2046, message.getRepeated_fixed64().get(i));
					}
					totalSize += repeated_fixed64Size;
				}
				System.out.println(totalSize);
				int repeated_int64Size = 0;
				if (message.hasRepeated_int64()) {
					for (int i = 0; i < message.getRepeated_int64().size(); i++) {
						repeated_int64Size += ProtobufOutputStream.computeInt64Size(2047, message.getRepeated_int64().get(i));
					}
					totalSize += repeated_int64Size;
				}
				System.out.println(totalSize);
				int repeated_floatSize = 0;
				if (message.hasRepeated_float()) {
					for (int i = 0; i < message.getRepeated_float().size(); i++) {
						repeated_floatSize += ProtobufOutputStream.computeFloatSize(262142, message.getRepeated_float().get(i));
					}
					totalSize += repeated_floatSize;
				}
				System.out.println(totalSize);
				int repeated_uint64Size = 0;
				if (message.hasRepeated_uint64()) {
					for (int i = 0; i < message.getRepeated_uint64().size(); i++) {
						repeated_uint64Size += ProtobufOutputStream.computeUint64Size(262143, message.getRepeated_uint64().get(i));
					}
					totalSize += repeated_uint64Size;
				}
				System.out.println(totalSize);
				final byte[] result = new byte[totalSize];
				int position = 0;
				if (message.hasRepeated_fixed32()) {
					if (message.getRepeated_fixed32().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(12, result, position);
						position = ProtobufOutputStream.writeRawVarint32(repeated_fixed32Size, result, position);
						for (int i = 0; i < message.getRepeated_fixed32().size(); i++) {
							position = ProtobufOutputStream.writeFixed32NoTag(message.getRepeated_fixed32().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasRepeated_int32()) {
					if (message.getRepeated_int32().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(13, result, position);
						position = ProtobufOutputStream.writeRawVarint32(repeated_int32Size, result, position);
						for (int i = 0; i < message.getRepeated_int32().size(); i++) {
							position = ProtobufOutputStream.writeInt32NoTag(message.getRepeated_int32().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasRepeated_fixed64()) {
					if (message.getRepeated_fixed64().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(2046, result, position);
						position = ProtobufOutputStream.writeRawVarint32(repeated_fixed64Size, result, position);
						for (int i = 0; i < message.getRepeated_fixed64().size(); i++) {
							position = ProtobufOutputStream.writeFixed64NoTag(message.getRepeated_fixed64().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasRepeated_int64()) {
					if (message.getRepeated_int64().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(2047, result, position);
						position = ProtobufOutputStream.writeRawVarint32(repeated_int64Size, result, position);
						for (int i = 0; i < message.getRepeated_int64().size(); i++) {
							position = ProtobufOutputStream.writeInt64NoTag(message.getRepeated_int64().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasRepeated_float()) {
					if (message.getRepeated_float().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(262142, result, position);
						position = ProtobufOutputStream.writeRawVarint32(repeated_floatSize, result, position);
						for (int i = 0; i < message.getRepeated_float().size(); i++) {
							position = ProtobufOutputStream.writeFloatNoTag(message.getRepeated_float().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				if (message.hasRepeated_uint64()) {
					if (message.getRepeated_uint64().size() > 0) {
						position = ProtobufOutputStream.writeRawVarint32(262143, result, position);
						position = ProtobufOutputStream.writeRawVarint32(repeated_uint64Size, result, position);
						for (int i = 0; i < message.getRepeated_uint64().size(); i++) {
							position = ProtobufOutputStream.writeUint64NoTag(message.getRepeated_uint64().get(i), result, position);
						}
						System.out.println(position);
					}
				}
				ProtobufOutputStream.checkNoSpaceLeft(result, position);
				return result;
			} catch (IOException e) {
				throw new RuntimeException("Serializing to a byte array threw an IOException (should never happen).", e);
			}
		}

		private static void assertInitialized(protobuf_memless_unittest.UnittestProto.TestRepeatedScalarDifferentTagSizes message) {
		}
	}

	public interface FooRequest {
	}

	public static class FooRequestSerializer {
		public static byte[] serialize(protobuf_memless_unittest.UnittestProto.FooRequest message) {
			return new byte[0];
		}
	}

	public interface FooResponse {
	}

	public static class FooResponseSerializer {
		public static byte[] serialize(protobuf_memless_unittest.UnittestProto.FooResponse message) {
			return new byte[0];
		}
	}

	public interface BarRequest {
	}

	public static class BarRequestSerializer {
		public static byte[] serialize(protobuf_memless_unittest.UnittestProto.BarRequest message) {
			return new byte[0];
		}
	}

	public interface BarResponse {
	}

	public static class BarResponseSerializer {
		public static byte[] serialize(protobuf_memless_unittest.UnittestProto.BarResponse message) {
			return new byte[0];
		}
	}
}
